---
title: "workflow_micro_NYC"
author: "Jiali Zhu"
date: "today"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-summary: "Code"
editor: visual
---

```{r}
#| label: load-packages
#| include: false
#| warning: false

library(zhulabtools)
load_packages(c("dplyr","lubridate", "ggplot2", "sf","sp", "readr", "purrr", "stringr","glue", "tidyr", "broom","lme4", "knitr", "broom.mixed", "ppcor", "spdep", "spatialreg", "lmtest","car", "spBayes", "coda", "patchwork", "performance", "terra", "ggpmisc", "gstat", "ggmcmc"))
# source("~/phenology-urban/script/read_clean_WU.R")
select <- dplyr::select
```

## 1. Raw data

### 1.1 Insert tree id base on WU data

For exploratory analysis, I used the street tree in NYC, with the phenology information established by Yiluan. These trees are part of the whole inventory, covering only 14 genera and being sampled. I select the trees which are within 500-m buffer around the weather underground sites (see @fig-tree_wu_sites).

```{r}
#| label: tree_wu_sites
#| include: false
#| warning: false

################ For phenology data ################

city = "NY"
metadata <- read_csv("~/lab-data/datasets/vegetation/PS/urban/metadata.csv") %>%
  filter(site == !!city)

file_list <- list.files(path = "~/lab-data/datasets/vegetation/PS/urban/doy", pattern = paste0("^doy_",city,"_.*\\.rds$"), full.names = TRUE)

data_list <- file_list %>%
  map(~ readRDS(.x))
all_doy <- bind_rows(data_list)

tree_location <- metadata %>%
  mutate(genus = str_extract(taxa, "^[^ ]+")) %>%
  left_join(all_doy, by = "id") %>%
  filter(!is.na(doy))

just_tree_location <- tree_location %>%
  group_by(id) %>%
  slice(1) %>%
  ungroup() %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326)

wu_location <- read_csv(paste0("~/urban-cooling/data/raw/WU/", city, "/location.csv"), show_col_types = FALSE) %>%
  st_as_sf(coords = c("Lon", "Lat"), crs = 4326)
wu_buffer <- st_buffer(wu_location, dist = 500)

intersects <- st_intersects(just_tree_location, wu_buffer)

id_buffer <- just_tree_location %>%
  mutate(buffer_id = sapply(intersects, function(x) if (length(x) == 1) x[1] else NA)) %>% 
  left_join(wu_buffer %>% st_drop_geometry() %>% mutate(buffer_id = row_number()), by = "buffer_id") %>%
  filter(!is.na(buffer_id)) %>%
  dplyr::select(id, Site) %>%
  rbind(
    just_tree_location %>%
    filter(lengths(intersects) > 1) %>%
    rowwise() %>%
    mutate(
      Site = {
        current_row_index <- which(just_tree_location$id == id)
        intersected_buffers <- intersects[[current_row_index]]
        point_geom <- geometry
        buffer_geoms <- wu_location[intersected_buffers, ]$geometry
        distances <- st_distance(point_geom, buffer_geoms)
        nearest_index <- which.min(distances)
        wu_buffer$Site[intersected_buffers[nearest_index]]
      }
    ) %>%
    ungroup() %>%
    dplyr::select(id, Site)
  )

points_in_buffer <- tree_location %>%
  left_join(id_buffer, by = "id") %>%
  filter(!is.na(Site))

# write_csv(points_in_buffer, paste0("~/phenology-urban/data/proc/urban/", city, "/tree_WU_500_buffer_PS.csv"))
points_in_buffer <- read_csv("~/phenology-urban/data/proc/urban/NY/tree_WU_500_buffer_PS.csv", show_col_types = FALSE)

```

```{r}
#| label: fig-tree_wu_sites
#| include: true
#| fig-cap: "Location of WU sites and trees"
#| warning: false

points_in_buffer_sf <- points_in_buffer %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326)
boundary <- st_read("~/urban-cooling/data/raw/WU/NY/Untitled/nybb_dissolved.shp") %>%
  st_transform(4326)

ggplot() +
  geom_sf(data = boundary, fill = "grey") +
  geom_sf(data = wu_location, color = "blue", size = 1) +
  geom_sf(data = points_in_buffer_sf, color = "red", size = 0.05) +
  theme_minimal()

```

### 1.2 Read and clean the WU data (based on GHCNd)

There are 4 raw daily variables selected, i.e. AvgTemp, HighTemp, LowTemp and Precipitation_sum (Sum_mm). I flagged the records which are unknown or questionable according to the methods applied by Global Historical Climatology Network daily [GHCNd](https://www.ncei.noaa.gov/products/land-based-station/global-historical-climatology-network-daily).

```{r}
#| label: read_wu_data
#| include: true
#| warning: false

# all_sites_temp <- read_clean_WU(city = "ST", run_checks = TRUE)
all_sites_temp <- readRDS("~/urban-cooling/data/raw/WU/NY/NY_wu.rds") %>%
  dplyr::select(c(Date, HighTemp, AvgTemp, LowTemp, Sum_mm, name))
```

### 1.3 Shortwave data from Daymet

```{r}
#| label: plot_function
#| include: true
#| warning: false

# download
srad_daily <- readRDS("~/phenology-urban/data/raw/NY/Daymet/daily2016-2024/srad_daily_2016-2023.rds")
```

## 2 Find the optimal preseason

The seasonal climate variables use a fixed pre-season for every trees, not allowing heterogeneity within city. Also, the roughly divided season make it difficult to connect to phenology process, e.g. chilling and forcing accumulation. Therefore, some studies use varing preseason or optimal preseason.

[Meng et al., 2020](https://www.sciencedirect.com/science/article/pii/S0168192319304484?via%3Dihub), [Wang et al., 2021](https://onlinelibrary.wiley.com/doi/10.1111/gcb.15777): The preseason was defined as the period from November 1st in the previous year to the time of `SOS` in the current year. (most fixed)

[Meng et al., 2020](https://www.pnas.org/doi/10.1073/pnas.1911117117#sec-3), [Yin et al., 2024](https://agupubs.onlinelibrary.wiley.com/doi/full/10.1029/2023EF004127): For each city, the period for which the absolute value of the partial correlation coefficient between `SOS` and `Temp` was highest was considered the optimal length of the preseason most relevant to `SOS`. (more flexible, cadidate time: 0 to 6 months prior to SOS, 5-day interval approach from January 1st to the average SOS date)

Here, based on the variable (phenology metric: `SOS`, `EOS`, `green-up pace`, `green-down pace`, temp. metric: t_avg, t_min, t_max), I find the optimal preseason at genus-city level (ignore the year for now due to sample size). The period for which the absolute value of the partial correlation coefficient between phenology and temp. metric is highest is considered the optimal length of the preseason most relevant to the certain phenology metric.

```{r}
#| label: optimal_preseason_fun
#| eval: false
#| include: true
#| warning: false

calculate_partial_correlation <- function(insert_data, direction, thres, genus, pre_lengths, 
                                          phe_variable, temp_variable) {
  subset_tree_pcor <- insert_data %>%
    filter(direction == !!direction & thres == !!thres & genus == !!genus)
  results <- lapply(pre_lengths, function(pre_length) {
    cat("Preseason length (days):", pre_length, "\n")
    preseason_var <- subset_tree_pcor %>%
      mutate(
        start_date = make_date(year) + days(round(mean(doy)) - 1) - days(pre_length),
        end_date = make_date(year) + days(round(mean(doy)) - 1)
      )

    temp_stats <- all_sites_temp %>%
      filter(name %in% preseason_var$Site) %>%
      inner_join(preseason_var, by = c("name" = "Site")) %>%
      filter(Date >= start_date & Date <= end_date) %>%
      group_by(id,year) %>%
      summarise(
        LowTemp_mean = mean(LowTemp, na.rm = TRUE),
        LowTemp_count = sum(!is.na(LowTemp)),
        AvgTemp_mean = mean(AvgTemp, na.rm = TRUE),
        AvgTemp_count = sum(!is.na(AvgTemp)),
        HighTemp_mean = mean(HighTemp, na.rm = TRUE),
        HighTemp_count = sum(!is.na(HighTemp)),
        Sum_mm_sum = sum(Sum_mm, na.rm = TRUE),
        Sum_mm_count = sum(!is.na(Sum_mm)),
        .groups = "drop"
      )
  
    srad_stats <- srad_daily %>%
      filter(id %in% preseason_var$id) %>%
      inner_join(preseason_var, by = "id") %>%
      filter(date >= start_date & date <= end_date) %>%
      group_by(id,year) %>%
      summarise(
        srad_mean = mean(value, na.rm = TRUE),
        srad_count = sum(!is.na(value)),
        .groups = "drop"
      )
    
    preseason_var <- preseason_var %>%
      left_join(temp_stats, by = c("id","year")) %>%
      left_join(srad_stats, by = c("id","year"))
    
    
    if (temp_variable %in% c("LowTemp_mean", "HighTemp_mean")){
      selected_data <- preseason_var %>%
      dplyr::select(
        {{ phe_variable }}, LowTemp_mean, HighTemp_mean, Sum_mm_sum,  srad_mean
      ) %>%
      na.omit()
    } else {
      selected_data <- preseason_var %>%
      dplyr::select(
        {{ phe_variable }}, AvgTemp_mean,Sum_mm_sum, srad_mean
      ) %>%
      na.omit()
    }
    partial_corr <- pcor(selected_data)
    
    correlation <- partial_corr$estimate[
        rownames(partial_corr$estimate) == phe_variable, 
        colnames(partial_corr$estimate) == temp_variable
      ]
    pvalue <- partial_corr$p.value[
        rownames(partial_corr$p.value) == phe_variable, 
        colnames(partial_corr$p.value) == temp_variable
      ]
  list(correlation = correlation, pvalue = pvalue, preseason_var = preseason_var)
  })
  
  correlations <- sapply(results, function(x) (x$correlation))
  pvalues <- sapply(results, function(x) (x$pvalue))
  
  
  max_idx <- which.max(abs(correlations))
  
  return(list(
    optimal_pre_length = pre_lengths[max_idx],
    pre_length_candidate  = pre_lengths,
    pre_length_trend = correlations,
    pvalue_trend = pvalues,
    partial_correlation = results[[max_idx]]$correlation,
    partial_corr_pvalue = results[[max_idx]]$pvalue,
    preseason_var = results[[max_idx]]$preseason_var
  ))
}


pre_lengths <- seq(5, 180, by = 5)
all_genus <- unique(points_in_buffer$genus)
temp_variable = "AvgTemp_mean"
```

### 2.1 Spring phenology

#### `SOS` date

Defined as the day of year when individual tree growing season EVI curves first cross the green-up 50% threshold.

```{r}
#| label: optimal_preseason_SOS
#| eval: FALSE
#| include: true
#| warning: false


direction <- "up"
thres <- 0.5
phe_variable = "doy"
insert_data = points_in_buffer

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

spring_date_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
spring_date_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
spring_date_combined_results <- do.call(rbind, lapply(spring_date_combined_results, as.data.frame))

```

#### Green-up Pace

Defined as the time span (in days) required for the individual tree growing season EVI curves to transition from the green-up 20% threshold to the 80% threshold.

```{r}
#| label: optimal_preseason_greenup_pace
#| eval: FALSE
#| include: true

diff <- points_in_buffer %>%
  group_by(year, id, direction) %>%
  filter(thres %in% c(0.2, 0.8)) %>% 
  summarise(
    doy_diff = abs(diff(doy[order(thres)])),
    .groups = "drop"
  )

points_with_diff <- points_in_buffer %>%
  left_join(diff, by = c("year", "id", "direction"))

direction <- "up"
thres <- 0.2              # change to 0.5?
phe_variable = "doy_diff"
insert_data = points_with_diff

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

spring_pace_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
spring_pace_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
spring_pace_combined_results <- do.call(rbind, lapply(spring_pace_combined_results, as.data.frame))

```

### 2.2 Fall phenology

#### `EOS` date

Defined as the day of year when individual tree growing season EVI curves first cross the green-down 50% threshold.

```{r}
#| label: optimal_preseason_EOS
#| layout-ncol: 2
#| eval: FALSE
#| include: true
#| warning: false

direction <- "down"
thres <- 0.5
phe_variable = "doy"
insert_data = points_in_buffer

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
 
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

fall_date_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
fall_date_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
fall_date_combined_results <- do.call(rbind, lapply(fall_date_combined_results, as.data.frame))
```

#### Green-down Pace

Defined as the time span (in days) required for the individual tree growing season EVI curves to transition from the green-down 20% threshold to the 80% threshold.

```{r}
#| label: optimal_preseason_greendown_pace
#| eval: FALSE
#| include: TRUE
direction <- "down"
thres <- 0.2
phe_variable = "doy_diff"
insert_data = points_with_diff

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
 
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

fall_pace_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
fall_pace_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
fall_pace_combined_results <- do.call(rbind, lapply(fall_pace_combined_results, as.data.frame))
```

```{r}
#| label: store_resuts
#| eval: FALSE
#| include: false
# tavg_allyear_var <- spring_date_preseason_var %>%
#   mutate(doy_diff = "NA") %>%
#   rbind(spring_pace_preseason_var, fall_pace_preseason_var) %>%
#   rbind(fall_date_preseason_var %>% mutate(doy_diff = "NA")) %>%
#   saveRDS("~/phenology-urban/data/proc/urban/NY/tavg_allyear_var.rds")

# tavg_allyear_pcorr <- spring_date_combined_results %>%
#   mutate(type = "SOS") %>%
#   rbind(spring_pace_combined_results %>% mutate(type = "green-up pace")) %>%
#   rbind(fall_pace_combined_results %>% mutate(type = "green-down pace")) %>%
#   rbind(fall_date_combined_results %>% mutate(type = "EOS"))%>%
#   saveRDS("~/phenology-urban/data/proc/urban/NY/tavg_allyear_pcorr.rds")

# thigh_allyear_var <- spring_date_preseason_var %>%
#   mutate(doy_diff = "NA") %>%
#   rbind(spring_pace_preseason_var, fall_pace_preseason_var) %>%
#   rbind(fall_date_preseason_var %>% mutate(doy_diff = "NA")) %>%
#   saveRDS("~/phenology-urban/data/proc/urban/NY/thigh_allyear_var.rds")
# 
# thigh_allyear_pcorr <- spring_date_combined_results %>%
#   mutate(type = "SOS") %>%
#   rbind(spring_pace_combined_results %>% mutate(type = "green-up pace")) %>%
#   rbind(fall_pace_combined_results %>% mutate(type = "green-down pace")) %>%
#   rbind(fall_date_combined_results %>% mutate(type = "EOS"))%>%
#   saveRDS("~/phenology-urban/data/proc/urban/NY/thigh_allyear_pcorr.rds")
# 
# tlow_allyear_var <- spring_date_preseason_var %>%
#   mutate(doy_diff = "NA") %>%
#   rbind(spring_pace_preseason_var, fall_pace_preseason_var) %>%
#   rbind(fall_date_preseason_var %>% mutate(doy_diff = "NA")) %>%
#   saveRDS("~/phenology-urban/data/proc/urban/NY/tlow_allyear_var.rds")
# 
# tlow_allyear_pcorr <- spring_date_combined_results %>%
#   mutate(type = "SOS") %>%
#   rbind(spring_pace_combined_results %>% mutate(type = "green-up pace")) %>%
#   rbind(fall_pace_combined_results %>% mutate(type = "green-down pace")) %>%
#   rbind(fall_date_combined_results %>% mutate(type = "EOS"))%>%
#   saveRDS("~/phenology-urban/data/proc/urban/NY/tlow_allyear_pcorr.rds")
```

### 2.3 Optimal preseason length calculated by Temp~avg~

@fig-partial_preseason displays the distribution of optimal preseason length and partial correlation coefficient calculated by Temp~avg~ for `SOS`, `Greenup pace`, `EOS` and `Greenup pace`, respectively.

As for `SOS`, all genera have negetive partial correlation coefficients, which means the higher preseason average temperature, the earlier start of season. As for `Greenup pace`, most genera (except Carya, Celtis) have negetive partial correlation coefficients, which means the higher preseason average temperature, the faster green up pace. The preseason length varies significantly among genera.

As for `EOS`, most genera (except Populus, Platanus) have positive partial correlation coefficients, which means the higher preseason average temperature, the later end of season. As for `Greenup pace`, there is variation in impact direction among genera. The preseason length also varies significantly among genera.

```{r}
#| label: fig-partial_preseason
#| layout-ncol: 1
#| fig-cap: "Distribution of partial correlation coefficient and preseason length, calculated by Temp~avg~"
#| fig-subcap: 
#|   - "Spring phenology"
#|   - "Fall phenology"
#| warning: false

tavg_allyear_pcorr <- readRDS("~/phenology-urban/data/proc/urban/NY/tavg_allyear_pcorr.rds") %>%
  select(genus, optimal_pre_length, partial_correlation, partial_corr_pvalue, type) %>%
  group_by(genus, optimal_pre_length, partial_correlation, partial_corr_pvalue, type) %>%
  slice(1) %>%
  ungroup() %>%
  pivot_wider(
    names_from = type,
    values_from = c(optimal_pre_length, partial_correlation, partial_corr_pvalue)
  ) %>%
  mutate(
    group_spring = case_when(
      partial_corr_pvalue_SOS <= 0.05 & `partial_corr_pvalue_green-up pace` <= 0.05 ~ "1",
      partial_corr_pvalue_SOS <= 0.05 & `partial_corr_pvalue_green-up pace` > 0.05 ~ "2",
      partial_corr_pvalue_SOS > 0.05 & `partial_corr_pvalue_green-up pace` <= 0.05 ~ "3",
      TRUE ~ "4"
    ),
    group_fall = case_when(
      partial_corr_pvalue_EOS <= 0.05 & `partial_corr_pvalue_green-down pace` <= 0.05 ~ "1",
      partial_corr_pvalue_EOS <= 0.05 & `partial_corr_pvalue_green-down pace` > 0.05 ~ "2",
      partial_corr_pvalue_EOS > 0.05 & `partial_corr_pvalue_green-down pace` <= 0.05 ~ "3",
      TRUE ~ "4"
    )
  )

spring_pcorr_p <- ggplot(tavg_allyear_pcorr, aes(x = partial_correlation_SOS, y = `partial_correlation_green-up pace`, color = group_spring, label = genus)) +
  geom_point(size = 3) +
  geom_text(vjust = -0.6, hjust = 0.5) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  scale_color_manual(
    values = c("1" = "mediumorchid4", "2" = "lightpink", "3" = "lightblue1", "4" = "gray95"),
    labels = c(
      "1" = "Both p-values < 0.05",
      "2" = "SOS p-value < 0.05 \n Green-up p-value > 0.05",
      "3" = "SOS p-value > 0.05 \n Green-up p-value < 0.05",
      "4" = "Both p-values > 0.05"
    )
  ) +
  labs(
    x = "Partial correlation coefficient (SOS)",
    y = "Partial correlation coefficient (Green-up pace)",
    color = "Group",
    title = "Distribution of\npartial correlation coefficient"
  ) +
  theme_minimal()  +
  theme(legend.position = "bottom")

spring_pre_length_p <- ggplot(tavg_allyear_pcorr, aes(x = optimal_pre_length_SOS, y = `optimal_pre_length_green-up pace`, color = group_spring, label = genus)) +
  geom_point(size = 3) +
  geom_text(vjust = -0.6, hjust = 0.5) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  scale_color_manual(
    values = c("1" = "mediumorchid4", "2" = "lightpink", "3" = "lightblue1", "4" = "gray95"),
    labels = c(
      "1" = "Both p-values < 0.05",
      "2" = "SOS p-value < 0.05 \n Green-up p-value > 0.05",
      "3" = "SOS p-value > 0.05 \n Green-up p-value < 0.05",
      "4" = "Both p-values > 0.05"
    )
  ) +
  labs(
    x = "Optimal preseason length (SOS)",
    y = "Optimal preseason length (Green-up Pace)",
    color = "Group",
    title = "Distribution of preseason length"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

fall_pcorr_p <- ggplot(tavg_allyear_pcorr, aes(x = partial_correlation_EOS, y = `partial_correlation_green-down pace`, color = group_fall, label = genus)) +
  geom_point(size = 3) +
  geom_text(vjust = -0.6, hjust = 0.5) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  scale_color_manual(
    values = c("1" = "mediumorchid4", "2" = "lightpink", "3" = "lightblue1", "4" = "gray95"),
    labels = c(
      "1" = "Both p-values < 0.05",
      "2" = "EOS p-value < 0.05 \n Green-down p-value > 0.05",
      "3" = "EOS p-value > 0.05 \n Green-down p-value < 0.05",
      "4" = "Both p-values > 0.05"
    )
  ) +
  labs(
    x = "Partial correlation coefficient (EOS)",
    y = "Partial correlation coefficient (Green-down pace)",
    color = "Group",
    title = "Distribution of\npartial correlation coefficient"
  ) +
  theme_minimal()  +
  theme(legend.position = "bottom")

fall_pre_length_p <- ggplot(tavg_allyear_pcorr, aes(x = optimal_pre_length_EOS, y = `optimal_pre_length_green-down pace`, color = group_fall, label = genus)) +
  geom_point(size = 3) +
  geom_text(vjust = -0.6, hjust = 0.5) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  scale_color_manual(
    values = c("1" = "mediumorchid4", "2" = "lightpink", "3" = "lightblue1", "4" = "gray95"),
    labels = c(
      "1" = "Both p-values < 0.05",
      "2" = "EOS p-value < 0.05 \n Green-down p-value > 0.05",
      "3" = "EOS p-value > 0.05 \n Green-down p-value < 0.05",
      "4" = "Both p-values > 0.05"
    )
  ) +
  labs(
    x = "Optimal preseason length (EOS)",
    y = "Optimal preseason length (Green-down Pace)",
    color = "Group",
    title = "Distribution of preseason length"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

spring_pcorr_p + spring_pre_length_p + plot_layout(guides = "collect") & theme(legend.position = "bottom")
fall_pcorr_p + fall_pre_length_p + plot_layout(guides = "collect") & theme(legend.position = "bottom")
```

## 3 Spatial pattern (SOS \~ T~avg~)

### 3.1 Check spatial autocorrelation

Both fixed-effect model and mixed-effects model have heterogeneous residuals. `Global Moran I for regression residuals` test indicates the presence of spatial autocorrelation in the residuals. `Lagrange Multiplier` test suggests the spatial model should be applied.

```{r}
#| label: check_sp_auto
#| include: true
#| warning: false

tavg_allyear_var <- readRDS("~/phenology-urban/data/proc/urban/NY/tavg_allyear_var.rds")
genera <- unique(tavg_allyear_var$genus)
variogram_results <- list()
for (i in 1:14) {
  genus = genera[i]
  tavg_SOS <- tavg_allyear_var %>%
    filter(direction == "up" & thres == 0.5 & genus == !!genus) %>%
    na.omit()
  random_OLS <- lmer(doy ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year), data = tavg_SOS)
  print(check_heteroscedasticity(random_OLS))
  tavg_SOS$residual_random <- tavg_SOS$doy - fitted(random_OLS)
  
  coordinates(tavg_SOS) <- ~ lon + lat
  vgm.emt <- variogram(residual_random ~ 1, tavg_SOS, cloud = FALSE)
  vgm.las.init <- vgm(model = c("Exp", "Sph", "Gau", "Mat"))
  vgm_exn_fit <- fit.variogram(vgm.emt, vgm.las.init)
  variogram_results[[i]] <- data.frame(
    genus = genus,
    model = vgm_exn_fit$model,
    psill = vgm_exn_fit$psill,
    range = vgm_exn_fit$range
  )
}
variogram_summary <- do.call(rbind, variogram_results)
kable(variogram_summary, caption = "Fitted semivariogram model for each genus")
```

### 3.2 Spatial statistical model

We modeled the relationship between the day of year ((\text{DOY})) and environmental covariates using a spatial hierarchical model. The response variable at location (\mathbf{s}\_i), denoted as (y(\mathbf{s}\_i)), was modeled as follows:

$$y(\mathbf{s}_i) = \mu(\mathbf{s}_i) + w(\mathbf{s}_i) + u_{\text{year}(i)} + \epsilon(\mathbf{s}_i)$$

where:

-   **Fixed Effects**: $$\mu(\mathbf{s}_i) = \mathbf{X}_i \boldsymbol{\beta}$$

    -   $\mathbf{X}_i = [1, \text{AvgTemp}, \text{Precp}, \text{srad}]$ is the design matrix of predictors.
    -   $\boldsymbol{\beta} = [\beta_0, \beta_1, \beta_2, \beta_3]$ are the regression coefficients for the intercept and covariates.

-   **Spatially Correlated Random Effect**: $$w(\mathbf{s}_i) \sim \text{MVN}(\mathbf{0}, \mathbf{R} \cdot \sigma^2)$$

    -   $\mathbf{R}$ is the spatial correlation matrix defined by a covariance function:

    -   **Matérn Covariance Function** (if selected): $$\mathbf{R}_{ij} = \sigma^2 \cdot \frac{2^{1-\nu}}{\Gamma(\nu)} \left(\frac{\sqrt{2\nu} D_{ij}}{\rho}\right)^\nu K_\nu\left(\frac{\sqrt{2\nu} D_{ij}}{\rho}\right)$$

    -   **Exponential Covariance Function** (if selected): $$\mathbf{R}_{ij} = \sigma^2 \cdot \exp(-\phi D_{ij})$$

    -   **Gaussian Covariance Function** (if selected): $$\mathbf{R}_{ij} = \sigma^2 \cdot \exp(-\phi D_{ij}^2)$$

    -   **Spherical Covariance Function** (if selected):

    $$\mathbf{R}_{ij} =
            \begin{cases}
            \sigma^2 \cdot \left(1 - \frac{3 D_{ij}}{2\rho} + \frac{D_{ij}^3}{2\rho ^3}\right), & D_{ij} \leq \rho \\
            0, & D_{ij} > \rho
            \end{cases}$$

-   **Year-specific Random Effect**: $$u_{\text{year}(i)} \sim \text{N}(0, \tau^2_{\text{year}})$$

    -   $u_{\text{year}(i)}$ captures year-to-year variability, with $\tau^2_{\text{year}}$ being the variance of the year effect.

-   **Independent Nugget Effect**: $$\epsilon(\mathbf{s}_i) \sim \text{N}(0, \tau^2)$$

    -   $\epsilon(\mathbf{s}\_i)$ accounts for measurement error or small-scale variability.

------------------------------------------------------------------------

**Prior Distributions**

$$\boldsymbol{\beta} \sim \text{MVN}(\mathbf{0}, 1000\mathbf{I})$$

$$\sigma^2 \sim \text{Inverse-Gamma}(2.5, 120)$$

$$\phi \sim \text{Uniform}(5, 50) \quad \text{(Exponential or Gaussian covariance)}$$

$$\nu \sim \text{Uniform}(0.5, 5) \quad \text{(Matérn covariance only)}$$

$$\rho \sim \text{Uniform}(0, 1) \quad \text{(Matérn or Spherical covariance)}$$

$$\tau^2 \sim \text{Inverse-Gamma}(0.001, 0.001)$$

$$\tau^2_{\text{year}} \sim \text{Inverse-Gamma}(2.001, 0.667)$$

------------------------------------------------------------------------

Problem with `year` (replicate location):

-   [x] **Treat `year` as random effect**

Problem with `genus`:

-   [x] **Fit each genus separately**



##### SOS in NYC

```{r}
#| label: fig-ny_sos_tavg
#| include: true
#| fig-cap: "The density of the posterior distribution of regression coefficients for `Temp~avg~` with `SOS` as the response variable for each genus in New York city."
#| fig-height: 14
#| warning: false


dir_path <- "~/phenology-urban/data/proc/urban/sp_model/"
files <- list.files(dir_path, pattern = "^NY.*SOS\\.rds$", full.names = TRUE)
plots <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_SOS\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == "AvgTemp")
  beta_median <- median(param_data$value)
  p <- param_data %>%
    ggs_density() +
    theme_bw() +
    ggtitle(paste("Genus:", genus)) +
    theme(plot.title = element_text(hjust = 0.5)) +
    annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4)
  plots[[genus]] <- p
}

combined_plot <- wrap_plots(plots, ncol = 2)
combined_plot
```



## 4 Conclusion and next step

Within the city, the relationship between phenology and temperature is still significant.

-   The warmer the preseason temperature, the earlier the spring phenology, considering the spatial autocorrelation of phenology in the model
-   The precipitation has no significant impact.

Next steps:

-   Key highlights (coordinate them with Juwon):
    -   Within-city variation, fall phenology, phenology pace, different taxa
-   Preseason Optimization: At the year-, site-, and taxa-level. Individual-level pre-period might have some built-in relationship.
-   Pace: As for the algorithm, more uncertainty around 0% and 100%. Use thresholds within the period (e.g., 10–90% or 20–80%) to represent pace.
-   Spatial regression: Try spBayes to address spatial autocorrelation.
-   Future steps:
    -   Test sensitivity by changing buffer size.
    -   Add more taxa (data in DataDen and download latest PS images)
