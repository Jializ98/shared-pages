---
title: "workflow_micro_NYC"
author: "Jiali Zhu"
date: "today"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-tools: true
    code-summary: "Code"
editor: visual
---

```{r}
#| label: load-packages
#| include: false
#| warning: false

library(zhulabtools)
load_packages(c("dplyr","lubridate", "ggplot2", "sf","sp", "readr", "purrr", "stringr","glue", "tidyr", "broom","lme4", "knitr", "broom.mixed", "ppcor", "spdep", "spatialreg", "lmtest","car", "spBayes", "coda", "patchwork", "performance", "terra", "ggpmisc", "gstat", "ggmcmc", "INLA","viridis"))
# source("~/phenology-urban/script/read_clean_WU.R")
select <- dplyr::select
```

## Intro

-   Action term for last discussion

    -   R-INLA (rather than estimating the joint posterior distribution of the parameters via MCMC, INLA focusing on individual posterior marginals of the model parameters, which is enough to make inference of the model parameters and latent effects in most cases)
    -   Infererence: Sptatial random effects 
    -   Predictions
    -   Comparison to regular model
    -   Ecological questions -\> journal goals

-   Key highlights (coordinate them with Juwon):

    -   Within-city variation: fine-scale of phenology and climate observations, across large range.

    -   Spring & Fall phenology: [Katz et al., 2019](https://www.sciencedirect.com/science/article/pii/S0048969718343675) [Xing et al., 2022](https://link.springer.com/article/10.1007/s00484-022-02322-1). A few papers about intra-urban variation of phenology. Few about the fall phenology.

    -   Phenology pace, different taxa

-   Methods

    -   Preseason Optimization: At the year-, site-, and taxa-level. Individual-level pre-period might have some built-in relationship.

    -   Spatial regression: Use `R-INLA` package to address spatial autocorrelation.

## 1 Raw data

### 1.1 Insert tree id base on WU data

For exploratory analysis, I used the street tree in 4 cities, with the phenology information established by Yiluan. These trees are part of the whole inventory, covering 14 genera and being sampled. I select the trees which are within **500 m** buffer around the weather underground sites (see @fig-tree_wu_sites).

```{r}
#| label: tree_wu_sites
#| include: false
#| warning: false
#| eval: false

################ For phenology data ################

metadata <- read_csv("~/lab-data/datasets/vegetation/PS/urban/metadata.csv") %>%
  filter(site == !!city)

file_list <- list.files(path = "~/lab-data/datasets/vegetation/PS/urban/doy", pattern = paste0("^doy_",city,"_.*\\.rds$"), full.names = TRUE)

data_list <- file_list %>%
  map(~ readRDS(.x))
all_doy <- bind_rows(data_list)

tree_location <- metadata %>%
  mutate(genus = str_extract(taxa, "^[^ ]+")) %>%
  left_join(all_doy, by = "id") %>%
  filter(!is.na(doy))

just_tree_location <- tree_location %>%
  group_by(id) %>%
  slice(1) %>%
  ungroup() %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326)

wu_location <- read_csv(paste0("~/urban-cooling/data/raw/WU/", city, "/location.csv"), show_col_types = FALSE) %>%
  st_as_sf(coords = c("Lon", "Lat"), crs = 4326)
wu_buffer <- st_buffer(wu_location, dist = 500)

intersects <- st_intersects(just_tree_location, wu_buffer)

id_buffer <- just_tree_location %>%
  mutate(buffer_id = sapply(intersects, function(x) if (length(x) == 1) x[1] else NA)) %>% 
  left_join(wu_buffer %>% st_drop_geometry() %>% mutate(buffer_id = row_number()), by = "buffer_id") %>%
  filter(!is.na(buffer_id)) %>%
  dplyr::select(id, Site) %>%
  rbind(
    just_tree_location %>%
    filter(lengths(intersects) > 1) %>%
    rowwise() %>%
    mutate(
      Site = {
        current_row_index <- which(just_tree_location$id == id)
        intersected_buffers <- intersects[[current_row_index]]
        point_geom <- geometry
        buffer_geoms <- wu_location[intersected_buffers, ]$geometry
        distances <- st_distance(point_geom, buffer_geoms)
        nearest_index <- which.min(distances)
        wu_buffer$Site[intersected_buffers[nearest_index]]
      }
    ) %>%
    ungroup() %>%
    dplyr::select(id, Site)
  )

points_in_buffer <- tree_location %>%
  left_join(id_buffer, by = "id") %>%
  filter(!is.na(Site))

# write_csv(points_in_buffer, paste0("~/phenology-urban/data/proc/urban/", city, "/tree_WU_500_buffer_PS.csv"))

```

```{r}
#| label: fig-tree_wu_sites
#| include: true
#| fig-cap: "Location of WU sites and trees"
#| fig-width: 13
#| warning: false

cities = c("NY", "HT", "DV", "ST")
plots = list()

for (city in cities){
  points_in_buffer <- read_csv(paste0("~/phenology-urban/data/proc/urban/",city,"/tree_WU_500_buffer_PS.csv"), show_col_types = FALSE)
  points_in_buffer_sf <- points_in_buffer %>%
    st_as_sf(coords = c("lon", "lat"), crs = 4326)
  # us_boundary <- st_read("~/urban-niche/data/raw/CONUS/boundary/us_boundarydissolve.shp") %>%
  #     st_transform(4326)
  
  boundary <- switch(
    city,
    "NY" = st_read("~/urban-cooling/data/raw/WU/NY/Untitled/nybb_dissolved.shp",quiet = TRUE) %>%
      st_transform(4326),
    "DT" = st_read("~/urban-cooling/data/raw/WU/DT/City_of_Detroit_Boundary/City_of_Detroit_Boundary.shp",quiet = TRUE) %>%
      st_transform(4326),
    "ST" = st_read("~/urban-cooling/data/raw/WU/ST/seattle_boundary/CityUGA.shp",quiet = TRUE) %>%
      st_transform(4326) %>%
      filter(CITY_NM == "Seattle"),
    "HT" = st_read("~/urban-cooling/data/raw/WU/HT/HGAC_City_Boundaries/HGAC_City_Boundaries.shp",quiet = TRUE) %>%
      filter(NAME == "Houston") %>%
      st_transform(4326),
    "TP" = st_read("~/urban-cooling/data/raw/WU/TP/Municipal_Boundary/Municipal_Boundary.shp") %>%
      st_transform(4326) %>%
      filter(NAME == "Tampa"),
    "DV" = st_read("~/urban-cooling/data/raw/WU/DV/DRCOG_Municipalities/DRCOG_Municipalities.shp",quiet = TRUE) %>%
      filter(city == "Denver") %>%
      st_transform(4326),
    "AT" = st_read("~/urban-cooling/data/raw/WU/AT/TxDOT_City_Boundaries/Cities.shp",quiet = TRUE) %>%
      filter(CITY_NM == "Austin") %>%
      st_transform(4326),
    stop("Invalid city abbreviation.")
  )
  
  wu_location <- read_csv(paste0("~/urban-cooling/data/raw/WU/", city, "/location.csv"), show_col_types = FALSE) %>%
    st_as_sf(coords = c("Lon", "Lat"), crs = 4326)
  
  p = ggplot() +
    geom_sf(data = boundary, fill = "grey90") +
    # geom_sf(data = us_boundary, color = "blue", size = 1) +
    geom_sf(data = wu_location, color = "blue", size = 0.5) +
    geom_point(data = points_in_buffer, aes(x = lon, y = lat), color = "red",size = 0.01, alpha = 0.01) +
    labs(title = city) +
    theme_minimal()+
    theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
  plots[[city]] = p
}


combined_plot <- wrap_plots(plots, ncol = 2)
combined_plot

city = "NY"
```

### 1.2 Read and clean the WU data (based on GHCNd)

There are 4 raw daily variables selected, i.e. AvgTemp, HighTemp, LowTemp and Precipitation_sum (Sum_mm). I flagged the records which are unknown or questionable according to the methods applied by Global Historical Climatology Network daily [GHCNd](https://www.ncei.noaa.gov/products/land-based-station/global-historical-climatology-network-daily).

```{r}
#| label: read_wu_data
#| include: true
#| warning: false

# all_sites_temp <- read_clean_WU(city = "ST", run_checks = TRUE)
all_sites_temp <- readRDS(paste0("~/urban-cooling/data/raw/WU/",city,"/",city,"_wu.rds")) %>%
  dplyr::select(c(Date, HighTemp, AvgTemp, LowTemp, Sum_mm, name))
```

### 1.3 Shortwave data from Daymet

To control for the influence of other variables on phenology, I also incorporated shortwave radiation data derived from the Daymet daily dataset with a 1 km resolution. Shortwave radiation was extracted for the specific locations of the trees.

```{r}
#| label: plot_function
#| include: true
#| warning: false

# download
srad_daily <- readRDS(paste0("~/phenology-urban/data/raw/",city,"/Daymet/daily2016-2024/srad_daily_2016-2023.rds")) %>%
  select(id, value, date)
```

## 2 Phenological indicators and optimal preseason

The phenological metrics are defined as follows:

![Phenology metrics calculated based on EVI curve from PlanetScope](docs/pheno_matrix.png){#fig-pheno_matrics}

```{r}
#| label: optimal_preseason_fun
#| eval: false
#| include: true
#| warning: false

calculate_partial_correlation <- function(insert_data, direction, thres, genus, pre_lengths, 
                                          phe_variable, temp_variable) {
  subset_tree_pcor <- insert_data %>%
    filter(direction == !!direction & thres == !!thres & genus == !!genus)
  results <- lapply(pre_lengths, function(pre_length) {
    cat("Preseason length (days):", pre_length, "\n")
    preseason_var <- subset_tree_pcor %>%
      mutate(
        start_date = make_date(year) + days(round(mean(doy)) - 1) - days(pre_length),
        end_date = make_date(year) + days(round(mean(doy)) - 1)
      )

    temp_stats <- all_sites_temp %>%
      # filter(name %in% preseason_var$Site) %>%
      inner_join(preseason_var, by = c("name" = "Site")) %>%
      filter(Date >= start_date & Date <= end_date) %>%
      group_by(id,year) %>%
      summarise(
        LowTemp_mean = mean(LowTemp, na.rm = TRUE),
        LowTemp_count = sum(!is.na(LowTemp)),
        AvgTemp_mean = mean(AvgTemp, na.rm = TRUE),
        AvgTemp_count = sum(!is.na(AvgTemp)),
        HighTemp_mean = mean(HighTemp, na.rm = TRUE),
        HighTemp_count = sum(!is.na(HighTemp)),
        Sum_mm_sum = sum(Sum_mm, na.rm = TRUE),
        Sum_mm_count = sum(!is.na(Sum_mm)),
        .groups = "drop"
      )
  
    srad_stats <- srad_daily %>%
      # filter(id %in% preseason_var$id) %>%
      inner_join(preseason_var, by = "id") %>%
      filter(date >= start_date & date <= end_date) %>%
      group_by(id,year) %>%
      summarise(
        srad_mean = mean(value, na.rm = TRUE),
        srad_count = sum(!is.na(value)),
        .groups = "drop"
      )
    
    preseason_var <- preseason_var %>%
      left_join(temp_stats, by = c("id","year")) %>%
      left_join(srad_stats, by = c("id","year"))
    
    
    if (temp_variable %in% c("LowTemp_mean", "HighTemp_mean")){
      selected_data <- preseason_var %>%
      dplyr::select(
        {{ phe_variable }}, LowTemp_mean, HighTemp_mean, Sum_mm_sum,  srad_mean
      ) %>%
      na.omit()
    } else {
      selected_data <- preseason_var %>%
      dplyr::select(
        {{ phe_variable }}, AvgTemp_mean,Sum_mm_sum, srad_mean
      ) %>%
      na.omit()
    }
    partial_corr <- pcor(selected_data)
    
    correlation <- partial_corr$estimate[
        rownames(partial_corr$estimate) == phe_variable, 
        colnames(partial_corr$estimate) == temp_variable
      ]
    pvalue <- partial_corr$p.value[
        rownames(partial_corr$p.value) == phe_variable, 
        colnames(partial_corr$p.value) == temp_variable
      ]
  list(correlation = correlation, pvalue = pvalue, preseason_var = preseason_var)
  })
  
  correlations <- sapply(results, function(x) (x$correlation))
  pvalues <- sapply(results, function(x) (x$pvalue))
  
  
  max_idx <- which.max(abs(correlations))
  
  return(list(
    optimal_pre_length = pre_lengths[max_idx],
    pre_length_candidate  = pre_lengths,
    pre_length_trend = correlations,
    pvalue_trend = pvalues,
    partial_correlation = results[[max_idx]]$correlation,
    partial_corr_pvalue = results[[max_idx]]$pvalue,
    preseason_var = results[[max_idx]]$preseason_var
  ))
}


pre_lengths <- seq(5, 180, by = 5)
all_genus <- unique(points_in_buffer$genus)
temp_variable = "AvgTemp_mean"
```

### 2.1 Spring phenology

#### `SOS` date

Defined as the day of year when individual tree growing season EVI curves first cross the green-up 50% threshold.

```{r}
#| label: optimal_preseason_SOS
#| eval: FALSE
#| include: true
#| warning: false


direction <- "up"
thres <- 0.5
phe_variable = "doy"
insert_data = points_in_buffer

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

spring_date_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
spring_date_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
spring_date_combined_results <- do.call(rbind, lapply(spring_date_combined_results, as.data.frame))

```

#### Green-up Pace

Defined as the time span (in days) required for the individual tree growing season EVI curves to transition from the green-up 20% threshold to the 80% threshold.

```{r}
#| label: optimal_preseason_greenup_pace
#| eval: FALSE
#| include: true

diff <- points_in_buffer %>%
  group_by(year, id, direction) %>%
  filter(thres %in% c(0.2, 0.8)) %>% 
  summarise(
    doy_diff = abs(diff(doy[order(thres)])),
    .groups = "drop"
  )

points_with_diff <- points_in_buffer %>%
  left_join(diff, by = c("year", "id", "direction"))

direction <- "up"
thres <- 0.2              # change to 0.5?
phe_variable = "doy_diff"
insert_data = points_with_diff

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

spring_pace_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
spring_pace_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
spring_pace_combined_results <- do.call(rbind, lapply(spring_pace_combined_results, as.data.frame))

```

### 2.2 Fall phenology

#### `EOS` date

Defined as the day of year when individual tree growing season EVI curves first cross the green-down 50% threshold.

```{r}
#| label: optimal_preseason_EOS
#| layout-ncol: 2
#| eval: FALSE
#| include: true
#| warning: false

direction <- "down"
thres <- 0.5
phe_variable = "doy"
insert_data = points_in_buffer

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
 
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

fall_date_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
fall_date_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
fall_date_combined_results <- do.call(rbind, lapply(fall_date_combined_results, as.data.frame))
```

#### Green-down Pace

Defined as the time span (in days) required for the individual tree growing season EVI curves to transition from the green-down 20% threshold to the 80% threshold.

```{r}
#| label: optimal_preseason_greendown_pace
#| eval: FALSE
#| include: TRUE
direction <- "down"
thres <- 0.2
phe_variable = "doy_diff"
insert_data = points_with_diff

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
 
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

fall_pace_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
fall_pace_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
fall_pace_combined_results <- do.call(rbind, lapply(fall_pace_combined_results, as.data.frame))
```

```{r}
#| label: store_resuts
#| eval: FALSE
#| include: false

# tavg_allyear_var <- spring_date_preseason_var %>%
#   mutate(doy_diff = "NA") %>%
#   rbind(spring_pace_preseason_var, fall_pace_preseason_var) %>%
#   rbind(fall_date_preseason_var %>% mutate(doy_diff = "NA")) %>%
#   saveRDS(paste0("~/phenology-urban/data/proc/urban/", city, "/tavg_allyear_var.rds"))
# 
# tavg_allyear_pcorr <- spring_date_combined_results %>%
#   mutate(type = "SOS") %>%
#   rbind(spring_pace_combined_results %>% mutate(type = "green-up pace")) %>%
#   rbind(fall_pace_combined_results %>% mutate(type = "green-down pace")) %>%
#   rbind(fall_date_combined_results %>% mutate(type = "EOS"))%>%
#   saveRDS(paste0("~/phenology-urban/data/proc/urban/", city, "/tavg_allyear_pcorr.rds"))

# thigh_allyear_var <- spring_date_preseason_var %>%
#   mutate(doy_diff = "NA") %>%
#   rbind(spring_pace_preseason_var, fall_pace_preseason_var) %>%
#   rbind(fall_date_preseason_var %>% mutate(doy_diff = "NA")) %>%
#   saveRDS("~/phenology-urban/data/proc/urban/", city, "/thigh_allyear_var.rds")
# 
# thigh_allyear_pcorr <- spring_date_combined_results %>%
#   mutate(type = "SOS") %>%
#   rbind(spring_pace_combined_results %>% mutate(type = "green-up pace")) %>%
#   rbind(fall_pace_combined_results %>% mutate(type = "green-down pace")) %>%
#   rbind(fall_date_combined_results %>% mutate(type = "EOS"))%>%
#   saveRDS("~/phenology-urban/data/proc/urban/", city, "/thigh_allyear_pcorr.rds")
# 
# tlow_allyear_var <- spring_date_preseason_var %>%
#   mutate(doy_diff = "NA") %>%
#   rbind(spring_pace_preseason_var, fall_pace_preseason_var) %>%
#   rbind(fall_date_preseason_var %>% mutate(doy_diff = "NA")) %>%
#   saveRDS("~/phenology-urban/data/proc/urban/", city, "/tlow_allyear_var.rds")
# 
# tlow_allyear_pcorr <- spring_date_combined_results %>%
#   mutate(type = "SOS") %>%
#   rbind(spring_pace_combined_results %>% mutate(type = "green-up pace")) %>%
#   rbind(fall_pace_combined_results %>% mutate(type = "green-down pace")) %>%
#   rbind(fall_date_combined_results %>% mutate(type = "EOS"))%>%
#   saveRDS("~/phenology-urban/data/proc/urban/", city, "/tlow_allyear_pcorr.rds")
```

### 2.3 Optimal preseason length calculated by Temp~avg~

Defined as the period (5-180 days, with 5-day steps) before phenological event for which the partial correlation coefficient between mean phenological event date and average temperature was highest, controlling other climate variables. [Meng et al., 2020](https://www.pnas.org/doi/10.1073/pnas.1911117117#sec-3), [Yin et al., 2024](https://agupubs.onlinelibrary.wiley.com/doi/full/10.1029/2023EF004127)

![Conceptual diagram for optimal preseason](docs/preseason.png){#fig-preseason_concept}

@fig-partial_preseason displays the distribution of optimal preseason length and partial correlation coefficient calculated by Temp~avg~ for `SOS`, `Greenup pace`, `EOS` and `Greenup pace`, respectively.

Optimal preseason length for spring phenology varies among genera. As for `SOS`, all genera have negetive partial correlation coefficients, which means the higher preseason average temperature, the earlier start of season. As for `Greenup pace`, most genera (except Carya, Celtis) have negetive partial correlation coefficients, which means the higher preseason average temperature, the faster green up pace. The preseason length varies significantly among genera.

Both the optimal preseason length for fall phenology and the response direction vary significantly among genera. As for `EOS`, most genera (except Populus, Platanus) have positive partial correlation coefficients, which means the higher preseason average temperature, the later end of season. As for `Greenup pace`, there is variation in impact direction among genera. The preseason length also varies significantly among genera.

```{r}
#| label: fig-partial_preseason
#| layout-ncol: 1
#| fig-cap: "Distribution of partial correlation coefficient and preseason length, calculated by Temp~avg~"
#| fig-subcap: 
#|   - "Spring phenology"
#|   - "Fall phenology"
#| warning: false
#| fig-width: 13
#| fig-height: 6


tavg_allyear_pcorr <- readRDS(paste0("~/phenology-urban/data/proc/urban/",city,"/tavg_allyear_pcorr.rds")) %>%
  mutate(
    # Create a flag for optimal_pre_length
    is_optimal = ifelse(pre_length_candidate == optimal_pre_length, TRUE, FALSE),
    # Create a flag for significant pvalue
    is_significant = ifelse(pvalue_trend < 0.05, TRUE, FALSE),
    # Adjust transparency
    alpha = ifelse(is_optimal, 1, 0.2),
    shape = ifelse(is_significant, 21, 1),
    size = ifelse(is_optimal, 4, 1.2)
  ) %>%
  mutate(shape = factor(shape, levels = c(21, 1)),
         size = factor(size, levels = c(1.2, 4)))
  

# Create the plot
sos_p <- ggplot((tavg_allyear_pcorr %>% filter(type == "SOS")), aes(x = pre_length_candidate, y = pre_length_trend, color = genus, fill = genus, group = genus)) +
  geom_line(aes(alpha = 0.1)) +  # Add lines for trends
  geom_point(aes(alpha = alpha, shape = shape, size = size)) +  # Add points with alpha and fill
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  scale_alpha_identity() +  # Use the alpha values directly
  scale_shape_manual(
    name = "Significance", 
    values = c(21, 1),
    labels = c("p <= 0.05", "p > 0.05")   
    ) +
  scale_size_manual(
    name = "Pre-season length",  
    values = c(1.2, 4), 
    labels = c("Others", "Optimal preseason length")
  ) +
  guides(
    shape = guide_legend(override.aes = list(fill = c("black", NA),color = "black")))+
  labs(
    title = "Start of season",
    x = "Pre-season length",
    y = "Partial correlation coefficient"
  ) +
  theme_minimal() +
  theme(legend.position = "right",
        axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14),
        title = element_text(size = 14))
  
greenup_p <- ggplot((tavg_allyear_pcorr %>% filter(type == "green-up pace")), aes(x = pre_length_candidate, y = pre_length_trend, color = genus, fill = genus, group = genus)) +
  geom_line(aes(alpha = 0.1)) +  # Add lines for trends
  geom_point(aes(alpha = alpha, size = size, shape = shape)) +  # Add points with alpha and fill
    geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  scale_alpha_identity() +  # Use the alpha values directly
  scale_shape_manual(
    name = "Significance", 
    values = c(21, 1),
    labels = c("p <= 0.05", "p > 0.05")   
    ) +
  scale_size_manual(
    name = "Pre-season length",  
    values = c(1.2, 4), 
    labels = c("Others", "Optimal preseason length")
  ) +
  guides(
    shape = guide_legend(override.aes = list(fill = c("black", NA),color = "black")))+
  labs(
    title = "Green-up pace",
    x = "Pre-season length",
    y = "Partial correlation coefficient"
  ) +
  theme_minimal() +
  theme(legend.position = "right",
        axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14),
        title = element_text(size = 14))

eos_p <- ggplot((tavg_allyear_pcorr %>% filter(type == "EOS")), aes(x = pre_length_candidate, y = pre_length_trend, color = genus, fill = genus, group = genus)) +
  geom_line(aes(alpha = 0.1)) +  # Add lines for trends
  geom_point(aes(alpha = alpha, size = size, shape = shape)) +  # Add points with alpha and fill
    geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  scale_alpha_identity() +  # Use the alpha values directly
  scale_shape_manual(
    name = "Significance", 
    values = c(21, 1),
    labels = c("p <= 0.05", "p > 0.05")   
    ) +
  scale_size_manual(
    name = "Pre-season length",  
    values = c(1.2, 4), 
    labels = c("Others", "Optimal preseason length")
  ) +
  guides(
    shape = guide_legend(override.aes = list(fill = c("black", NA),color = "black")))+
  labs(
    title = "End of season",
    x = "Pre-season length",
    y = "Partial correlation coefficient"
  ) +
  theme_minimal() +
  theme(legend.position = "right",
        axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14),
        title = element_text(size = 14))


greendown_p <- ggplot((tavg_allyear_pcorr %>% filter(type == "green-down pace")), aes(x = pre_length_candidate, y = pre_length_trend, color = genus, fill = genus, group = genus)) +
  geom_line(aes(alpha = 0.1)) +  # Add lines for trends
  geom_point(aes(alpha = alpha, size = size, shape = shape)) +  # Add points with alpha and fill
    geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  scale_alpha_identity() +  # Use the alpha values directly
  scale_shape_manual(
    name = "Significance", 
    values = c(21, 1),
    labels = c("p <= 0.05", "p > 0.05")   
    ) +
  scale_size_manual(
    name = "Pre-season length",  
    values = c(1.2, 4), 
    labels = c("Others", "Optimal preseason length")
  ) +
  guides(
    shape = guide_legend(override.aes = list(fill = c("black", NA),color = "black")))+
  labs(
    title = "Green-down pace",
    x = "Pre-season length",
    y = "Partial correlation coefficient"
  ) +
  theme_minimal() +
  theme(legend.position = "right",
        axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14),
        title = element_text(size = 14))

sos_p + greenup_p + plot_layout(guides = "collect") & theme(legend.position = "right")
eos_p + greendown_p + plot_layout(guides = "collect") & theme(legend.position = "right")
```

## 3 Spatial pattern

### 3.1 Check spatial autocorrelation

First, I fitted a linear mixed-effects model for each genus with environmental variables (`AvgTemp_mean`, `Sum_mm_sum`, and `srad_mean`) as predictors, with random effects for `year` and `id`, which represent temporal (`(1 | year)`) and spatial (`(1 | id)`) randomness, respectively.

Then I conducted a variance decomposition analysis and compared the proportion of total variance explained by spatial effects and temporal effects respectively. Generally, spatial and temporal variations are both present, but their contributions vary across different genera. Some genera show higher spatial effects, while others have more balanced contributions from spatial and year components.

```{r}
#| label: fig-check_variance
#| include: true
#| warning: false
#| fig-cap: "Variance decomposition analysis for spatial and temporal effects"

tavg_allyear_var <- readRDS("~/phenology-urban/data/proc/urban/DV/tavg_allyear_var.rds")
phe_types <- c("SOS", "EOS", "GreenUp", "GreenDown")
all_genus <- unique(tavg_allyear_var$genus)
results <- list()

for (phe_type in phe_types) {
  if (phe_type == "SOS") {
    phe_metric <- "doy"
    direction <- "up"
    thres <- 0.5
  } else if (phe_type == "EOS") {
    phe_metric <- "doy"
    direction <- "down"
    thres <- 0.5
  } else if (phe_type == "GreenUp") {
    phe_metric <- "doy_diff"
    direction <- "up"
    thres <- 0.2
    tavg_allyear_var$doy_diff <- as.numeric(tavg_allyear_var$doy_diff)
  } else {
    phe_metric <- "doy_diff"
    direction <- "down"
    thres <- 0.2
    tavg_allyear_var$doy_diff <- as.numeric(tavg_allyear_var$doy_diff)
  }
    
    for (genus in all_genus) {
      tavg_SOS <- tavg_allyear_var %>%
        filter(direction == !!direction & thres == thres & genus == !!genus) %>%
        na.omit()
      model <- as.formula(paste0(phe_metric, " ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year) + (1 | id)"))
      full_model <- lmer(model, data = tavg_SOS)
      var_components <- VarCorr(full_model)
      
      total_variance <-  var_components$id[1, 1] +  var_components$year[1, 1] + attr(var_components, "sc")^2
      spatial_contribution <- var_components$id[1, 1]  / total_variance
      year_contribution <-  var_components$year[1, 1] / total_variance
      residual_contribution <- attr(var_components, "sc")^2 / total_variance
      
      variance_components <- data.frame(
            Metric = phe_type,
            Genus = genus,
            Component = c("Spatial", "Year", "Residual"),
            Variance = c(spatial_contribution, year_contribution, residual_contribution)
          )
          
          results[[paste(phe_type, genus, sep = "_")]] <- variance_components
  }
}

final_results <- do.call(rbind, results)
final_results <- final_results %>%
  group_by(Metric, Genus) %>%
  mutate(Variance_Proportion = Variance / sum(Variance),
         Component = factor(Component, levels = c("Spatial", "Residual", "Year")),
         Metric = factor(Metric, levels = c("SOS", "EOS", "GreenUp", "GreenDown")))

ggplot(final_results, aes(x = Genus, y = Variance_Proportion, fill = Component)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~Metric, scales = "free_x") +
  labs(x = "Genus", y = "Variance Proportion", fill = "Component") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set2") 
```

<!-- Using `SOS` as an example, I used `check_heteroscedasticity()` to check for heteroscedasticity in the residuals. The results showed almost every model had heterogenerous residuals. -->

<!-- For fixed-effect model (`SOS` \~ `AvgTemp_mean` + `Sum_mm_sum` + `srad_mean`), `Global Moran I` for regression residuals test indicates the presence of spatial autocorrelation in the residuals. `Lagrange Multiplier` test suggests the spatial model should be applied. -->

<!-- I computed the empirical semivariogram for the residuals to analyze spatial structure. The optimal theoretical semivariogram models (among Exp, Sph, Gau, Mat) were chosen to empirical semivariogram using `fit.variogram()`. -->

```{r}
#| label: check_sp_auto
#| include: true
#| warning: false
#| eval: false

tavg_allyear_var <- readRDS("~/phenology-urban/data/proc/urban/NY/tavg_allyear_var.rds")
genera <- unique(tavg_allyear_var$genus)


variogram_sos <- list()
for (i in 1:14) {
  genus = genera[i]
  tavg_SOS <- tavg_allyear_var %>%
    filter(direction == "up" & thres == 0.5 & genus == !!genus) %>%
    na.omit()
  random_OLS <- lmer(doy ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year), data = tavg_SOS)
  # print(check_heteroscedasticity(random_OLS))
  tavg_SOS$residual_random <- tavg_SOS$doy - fitted(random_OLS)

  coordinates(tavg_SOS) <- ~ lon + lat
  vgm.emt <- variogram(residual_random ~ 1, tavg_SOS, cloud = FALSE)
  vgm.las.init <- vgm(model = c("Exp", "Sph", "Gau", "Mat"))
  vgm_exn_fit <- fit.variogram(vgm.emt, vgm.las.init)
  variogram_sos[[i]] <- data.frame(
    genus = genus,
    SOS = vgm_exn_fit$model
  )
}
variogram_sos <- do.call(rbind, variogram_sos)


variogram_eos <- list()
for (i in 1:14) {
  genus = genera[i]
  tavg_SOS <- tavg_allyear_var %>%
    filter(direction == "down" & thres == 0.5 & genus == !!genus) %>%
    na.omit()
  random_OLS <- lmer(doy ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year), data = tavg_SOS)
  # print(check_heteroscedasticity(random_OLS))
  tavg_SOS$residual_random <- tavg_SOS$doy - fitted(random_OLS)

  coordinates(tavg_SOS) <- ~ lon + lat
  vgm.emt <- variogram(residual_random ~ 1, tavg_SOS, cloud = FALSE)
  vgm.las.init <- vgm(model = c("Exp", "Sph", "Gau", "Mat"))
  vgm_exn_fit <- fit.variogram(vgm.emt, vgm.las.init)
  variogram_eos[[i]] <- data.frame(
    genus = genus,
    EOS = vgm_exn_fit$model
  )
}
variogram_eos <- do.call(rbind, variogram_eos)

variogram_up <- list()
for (i in 1:14) {
  genus = genera[i]
  tavg_SOS <- tavg_allyear_var %>%
    filter(direction == "up" & thres == 0.2 & genus == !!genus) %>%
    mutate(doy_diff = as.numeric(doy_diff))%>%
    na.omit()
  random_OLS <- lmer(doy_diff ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year), data = tavg_SOS)
  # print(check_heteroscedasticity(random_OLS))
  tavg_SOS$residual_random <- tavg_SOS$doy - fitted(random_OLS)

  coordinates(tavg_SOS) <- ~ lon + lat
  vgm.emt <- variogram(residual_random ~ 1, tavg_SOS, cloud = FALSE)
  vgm.las.init <- vgm(model = c("Exp", "Sph", "Gau", "Mat"))
  vgm_exn_fit <- fit.variogram(vgm.emt, vgm.las.init)
  variogram_up[[i]] <- data.frame(
    genus = genus,
    GreenUp = vgm_exn_fit$model
  )
}
variogram_up <- do.call(rbind, variogram_up)

variogram_down <- list()
for (i in 1:14) {
  genus = genera[i]
  tavg_SOS <- tavg_allyear_var %>%
    filter(direction == "down" & thres == 0.2 & genus == !!genus) %>%
    mutate(doy_diff = as.numeric(doy_diff))%>%
    na.omit()
  random_OLS <- lmer(doy_diff ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year), data = tavg_SOS)
  # print(check_heteroscedasticity(random_OLS))
  tavg_SOS$residual_random <- tavg_SOS$doy - fitted(random_OLS)

  coordinates(tavg_SOS) <- ~ lon + lat
  vgm.emt <- variogram(residual_random ~ 1, tavg_SOS, cloud = FALSE)
  vgm.las.init <- vgm(model = c("Exp", "Sph", "Gau", "Mat"))
  vgm_exn_fit <- fit.variogram(vgm.emt, vgm.las.init)
  variogram_down[[i]] <- data.frame(
    genus = genus,
    GreenDown = vgm_exn_fit$model
  )
}
variogram_down <- do.call(rbind, variogram_down)

variogram_summary <- variogram_sos %>%
  left_join(variogram_eos, by = "genus") %>%
  left_join(variogram_up, by = "genus") %>%
  left_join(variogram_down, by = "genus")

kable(variogram_summary, caption = "Fitted semivariogram model for each genus")
```

<!-- Sph: 26, Mat: 22, Gau: 4, Exp: 4 HT: Sph, Mat -->

### 3.2 Spatial statistical model

I modeled the relationship between the phenology and environmental covariates using a spatial hierarchical model. The response variable (phenology parameter) at location $\mathbf{s}_i$ and in year $\mathbf{t}$, denoted as $y(\mathbf{s}_i, \mathbf{t})$, was modeled as following candidate model:

**Model 1: (current use)**

$$y(\mathbf{s}_i, \mathbf{t}) = \mu(\mathbf{s}_i,\mathbf{t}) + w(\mathbf{s}_i) + u(\mathbf{t}) + \epsilon(\mathbf{s}_i, \mathbf{t})$$

where:

-   *Fixed Effects*: $$\mu(\mathbf{s}_i,\mathbf{t}) = \mathbf{X}_{\mathbf{s}_i,\mathbf{t}} \boldsymbol{\beta}$$

    -   $\mathbf{X}_{\mathbf{s}_i,\mathbf{t}} = [1, \text{AvgTemp}_{\mathbf{s}_i,\mathbf{t}}, \text{Precp}_{\mathbf{s}_i,\mathbf{t}}, \text{srad}_{\mathbf{s}_i,\mathbf{t}}]$ is the design matrix of predictors.
    -   $\boldsymbol{\beta} = [\beta_0, \beta_1, \beta_2, \beta_3]$ are the regression coefficients for the intercept and covariates.

-   *Spatially Correlated Random Effect*: $$w(\mathbf{s}_i) \sim \text{MVN}(\mathbf{0}, \mathbf{R})$$

    -   $\mathbf{R}$ is the spatial correlation matrix defined by a covariance function:

    -   Matérn Covariance Function (if selected): $$\mathbf{R}_{ij} = \sigma^2 \cdot \frac{2^{1-\nu}}{\Gamma(\nu)} \left(\frac{\sqrt{2\nu} D_{ij}}{\rho}\right)^\nu K_\nu\left(\frac{\sqrt{2\nu} D_{ij}}{\rho}\right)$$

    -   Exponential Covariance Function (if selected): $$\mathbf{R}_{ij} = \sigma^2 \cdot \exp(-\phi D_{ij})$$

    -   Gaussian Covariance Function (if selected): $$\mathbf{R}_{ij} = \sigma^2 \cdot \exp(-\phi D_{ij}^2)$$

    -   Spherical Covariance Function (if selected):

    $$\mathbf{R}_{ij} =
            \begin{cases}
            \sigma^2 \cdot \left(1 - \frac{3 D_{ij}}{2\rho} + \frac{D_{ij}^3}{2\rho ^3}\right), & D_{ij} \leq \rho \\
            0, & D_{ij} > \rho
            \end{cases}$$

-   *Year-specific Random Effect*: $$u(\mathbf{t}) \sim \text{N}(0, \tau^2_{\mathbf{t}})$$

    -   $u_{\mathbf{t}}$ captures year-to-year variability, with $\tau^2_{\mathbf{t}}$ being the variance of the year effect.

-   *Independent Nugget Effect*: $$\epsilon(\mathbf{s}_i) \sim \text{N}(0, \tau^2)$$

    -   $\epsilon(\mathbf{s}_i, \mathbf{t})$ accounts for measurement error or small-scale variability.

### 3.3 Inference from spatial model

#### 3.3.1 SOS in NYC

**MCMC**

Most genera showed negative association between temperature and the start of season, suggesting the warmer preseason, the earilier start of season. Only Fraxinus had a positive association, with a median coefficient of 0.15. There are significant genus-level differences in how temperature influences the spring phenology.

As for the spatial field, only Salix seems to be ideal. Other genera exhibit either uniform spatial effects or noticeable local variations, even extremely high value.

```{r}
#| label: fig-ny_sos_tavg_mcmc
#| include: true
#| fig-width: 10
#| fig-height: 14
#| warning: false
#| eval: true
#| fig-cap: "The density of the posterior distribution of regression coefficients for `Temp~avg~` with `SOS` as the response variable for each genus in New York city."
#| fig-subcap: 
#|   - "Distribution of posterior for coeffeicents"
#|   - "Spatial field"

dir_path <- "~/phenology-urban/data/proc/urban/sp_model/year_random/"

files <- list.files(dir_path, pattern = "^NY.*SOS\\.rds$", full.names = TRUE)
plots <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_SOS\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == "AvgTemp")
  beta_median <- median(param_data$value)
  p <- param_data %>%
    ggs_density() +
    theme_bw() +
    ggtitle(paste("Genus:", genus)) +
    theme(plot.title = element_text(hjust = 0.5)) +
    annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4)
  plots[[genus]] <- p
}

combined_plot <- wrap_plots(plots, ncol = 3)
combined_plot


spherical_covariance <- function(d, range, sigma.sq) {
  result <- matrix(0, nrow = nrow(d), ncol = ncol(d))
  for (i in 1:nrow(d)) {
    for (j in 1:ncol(d)) {
      if (d[i, j] <= range) {
        result[i, j] <- sigma.sq * (1 - (3 * d[i, j] / (2 * range)) + (d[i, j]^3 / (2 * range^3)))
      } else {
        result[i, j] <- 0.0
      }
    }
  }
  return(result)
}

matern_covariance <- function(d, range, sigma.sq, nu) {
  result <- matrix(0, nrow = nrow(d), ncol = ncol(d))
  for (i in 1:nrow(d)) {
    for (j in 1:ncol(d)) {
      if (d[i, j] == 0) {
        result[i, j] <- 0.0
      } else {
        part <- (2^(1 - nu)) / gamma(nu) * (sqrt(2 * nu) * d[i, j] / range)^nu
        result[i, j] <- sigma.sq * part * besselK(sqrt(2 * nu) * d[i, j] / range, nu)
      }
    }
  }
  return(result)
}

dir_path <- "~/phenology-urban/data/proc/urban/sp_model/year_random/"
city = "NY"
phe_type = "SOS"
if (phe_type == "SOS") {
  phe_metric <- "doy"
  direction <- "up"
  thres <- 0.5
} else if (phe_type == "EOS") {
  phe_metric <- "doy"
  direction <- "down"
  thres <- 0.5
} else if (phe_type == "GreenUp") {
  phe_metric <- "doy_diff"
  direction <- "up"
  thres <- 0.2
  tavg_allyear_var$doy_diff <- as.numeric(tavg_allyear_var$doy_diff)
} else {
  phe_metric <- "doy_diff"
  direction <- "down"
  thres <- 0.2
  tavg_allyear_var$doy_diff <- as.numeric(tavg_allyear_var$doy_diff)
}

pattern = paste0("^",city,".*",phe_type,"\\.rds$")
files <- list.files(dir_path, pattern = "^NY.*SOS\\.rds$", full.names = TRUE)
plots_mean <- list()
plots_sd <- list()
plots_extend <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub("(.*?)_(.*?)_tavg_(.*?)\\.rds", "\\2", basename(file))
  
  spatial_mean <- model_data$summary[grep("spatial_effect", rownames(model_data$summary)), "Mean"]
  spatial_sd <- model_data$summary[grep("spatial_effect", rownames(model_data$summary)), "St.Dev."]
  
  tavg_allyear_var <- readRDS(paste0("~/phenology-urban/data/proc/urban/", city, "/tavg_allyear_var.rds"))  %>%
    filter(direction == !!direction & thres == !!thres & genus == !!genus) %>%
    na.omit()
  # %>%
  #   st_as_sf(coords = c("lon", "lat"), crs = 4326)
  # 
  OLS_formula <- as.formula(paste0(phe_metric, " ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year)"))
  random_OLS <- lmer(OLS_formula, data = tavg_allyear_var)
  tavg_allyear_var$residual_random <- tavg_allyear_var[[phe_metric]] - fitted(random_OLS)
  coordinates(tavg_allyear_var) <- ~ lon + lat
  vgm.emt <- variogram(residual_random ~ 1, tavg_allyear_var, cloud = FALSE)
  vgm.las.init <- vgm(model = c("Exp", "Sph", "Gau", "Mat"))
  vgm_exn_fit <- fit.variogram(vgm.emt, vgm.las.init)
  cov_type <- as.character(vgm_exn_fit$model)
  
  
  tavg_allyear_var <- readRDS(paste0("~/phenology-urban/data/proc/urban/", city, "/tavg_allyear_var.rds"))  %>%
    filter(direction == !!direction & thres == !!thres & genus == !!genus) %>%
    na.omit()
    
  monitors <- switch(
    cov_type,
    "Mat" = c("range", "sigma.sq", "nu"),
    "Gau" = c("tau", "sigma.sq", "phi"),
    "Exp" = c("tau", "sigma.sq", "phi"),
    "Sph" = c("range", "sigma.sq"),
    stop("Unknown cov_type!")
  )
  params <- list(range = NULL, sigma.sq = NULL, nu = NULL, phi = NULL)
  for (param in names(params)) {
    if (param %in% monitors) {
      params[[param]] <- model_data$summary[grep(param, rownames(model_data$summary)), "Mean"]
    }
  }
  grid <- expand.grid(
    lon = seq(min(tavg_allyear_var$lon), max(tavg_allyear_var$lon), length.out = 100),
    lat = seq(min(tavg_allyear_var$lat), max(tavg_allyear_var$lat), length.out = 100)
    )
  coords_known <- tavg_allyear_var[, c("lon", "lat")]
  coords_pred <- grid[, c("lon", "lat")]
  dist_matrix <- as.matrix(dist(coords_known))
  dist_matrix_known_pred <- as.matrix(dist(rbind(coords_pred, coords_known)))[1:nrow(coords_pred), (nrow(coords_pred) + 1):(nrow(coords_pred) + nrow(coords_known))]
  
  if (cov_type == "Mat") {
      cov_matrix <- matern_covariance(dist_matrix, params$range, params$sigma.sq, params$nu)
  } else if (cov_type == "Gau") {
      cov_matrix <- params$sigma.sq * exp(-params$phi * dist_matrix^2)
  } else if (cov_type == "Exp") {
      cov_matrix <- params$sigma.sq * exp(-params$phi * dist_matrix)
  } else if (cov_type == "Sph") {
      cov_matrix <- spherical_covariance(d = dist_matrix, range = params$range, sigma.sq = params$sigma.sq)
  }
  cov_matrix <- cov_matrix + diag(1e-6, nrow(dist_matrix))
  
  if (cov_type == "Mat") {
      cov_matrix_pred <- matern_covariance(dist_matrix_known_pred, params$range, params$sigma.sq, params$nu)
  } else if (cov_type == "Gau") {
      cov_matrix_pred <- params$sigma.sq * exp(-params$phi * dist_matrix_known_pred^2)
  } else if (cov_type == "Exp") {
      cov_matrix_pred <- params$sigma.sq * exp(-params$phi * dist_matrix_known_pred)
  } else if (cov_type == "Sph") {
      cov_matrix_pred <- spherical_covariance(d = dist_matrix_known_pred, range = params$range, sigma.sq = params$sigma.sq)
  }
  
  spatial_effect_pred <- cov_matrix_pred %*% solve(cov_matrix) %*% spatial_mean
  
  grid$spatial_effect <- spatial_effect_pred
  p <- ggplot(grid, aes(x = lon, y = lat, fill = spatial_effect)) +
    geom_tile() +
    scale_fill_gradient(low = "white", high = "red") +
    ggtitle(paste("Genus:", genus)) +
    theme_minimal() +
    
    labs(fill = "Mean")
  
  plots_extend[[genus]] <- p

  # tavg_allyear_var$spatial_mean <- spatial_mean
  # tavg_allyear_var$spatial_sd <- spatial_sd
  # 
  # p_mean <- ggplot() +
  #   geom_point(data = tavg_allyear_var, aes(x = lon, y = lat, color = spatial_mean), size = 2) +
  #   scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
  #   theme_minimal() +
  #   ggtitle(paste("Genus:", genus)) +
  #   labs(color = "Mean")
  # p_sd <- ggplot() +
  #   geom_point(data = tavg_allyear_var, aes(x = lon, y = lat, color = spatial_sd), size = 2) +
  #   scale_color_gradient(low = "white", high = "red") +
  #   theme_minimal() +
  #   ggtitle(paste("Genus:", genus)) +
  #   labs(color = "SD")
  # plots_mean[[genus]] <- p_mean
  # plots_sd[[genus]] <- p_sd
}

combined_plot_extend <- wrap_plots(plots_extend, ncol = 3)
combined_plot_extend
```

**INLA**

As for the INLA model, the coefficients do not show significant differences from the MCMC model, with most genera showed negative association between temperature and the start of season.

Compared to the previous MCMC results, these spatial fields appear to be smoother overall, with gradual transitions rather than sharp local variations.Some genera (Ulmus, Alnus) have fewer high/low value clusters due to fewer observations.

```{r}
#| label: fig-ny_sos_tavg
#| include: true
#| fig-width: 10
#| fig-height: 14
#| warning: false
#| eval: true
#| fig-cap: "The density of the posterior distribution of regression coefficients for `Temp~avg~` with `SOS` as the response variable for each genus in New York city."
#| fig-subcap: 
#|   - "Distribution of posterior for coeffeicents"
#|   - "Spatial field"

dir_path <- "~/phenology-urban/data/proc/urban/sp_model/inla_year_random/"
city = "NY"
phe_type = "GreenDown"
plots_mean <- list()
plots_sd <- list()
plots_semi <- list()

pattern = paste0("^",city,".*",phe_type,"\\.rds$")
files <- list.files(dir_path, pattern = pattern, full.names = TRUE)
plots_tavg <- list()
coef_summary <- data.frame()

# for one genus
for (file in files) {
  model_data <- readRDS(file)
  genus <- sub("(.*?)_(.*?)_tavg_(.*?)\\.rds", "\\2", basename(file))
  # beta_names <- c("beta[0]", "beta[AvgTemp_mean]", "beta[Sum_mm_sum]", "beta[srad_mean]")
  # df_list <- lapply(seq_along(model_data$res$marginals.fixed), function(i) {
  #   data.frame(x = model_data$res$marginals.fixed[[i]][,1], 
  #              density = model_data$res$marginals.fixed[[i]][,2], 
  #              beta = beta_names[i])
  # })
  # df <- bind_rows(df_list)
  beta_avg_temp <- model_data$res$marginals.fixed[[2]]
  df <- data.frame(
    x = beta_avg_temp[, 1],
    density = beta_avg_temp[, 2],
    beta = "beta[AvgTemp_mean]"
  )
  plot_tavg <- ggplot(df, aes(x = x, y = density)) +
    geom_line(linewidth = 1, color = "blue") +
    # facet_wrap(~beta, scales = "free", labeller = label_parsed) + 
    theme_minimal() +
    labs(x = "Coefficient Value", y = "Density") +
    ggtitle(paste("Genus:", genus)) +
    theme(legend.position = "none")
  plots_tavg[[genus]] <- plot_tavg

  proj <- inla.mesh.projector(model_data$mesh,dims = c(300, 300))
  mean_s <- inla.mesh.project(proj, model_data$res$summary.random$s$mean)
  sd_s <- inla.mesh.project(proj, model_data$res$summary.random$s$sd)
  df <- expand.grid(x = proj$x, y = proj$y)
  df$mean_s <- as.vector(mean_s)
  df$sd_s <- as.vector(sd_s)
  
  p_mean <- ggplot(df, aes(x = x, y = y, fill = mean_s)) +
    geom_raster() +
    scale_fill_viridis(na.value = "transparent") +
    ggtitle(paste("Genus:", genus)) +
    coord_fixed(ratio = 0.8) + theme_bw() +
    theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
  
  p_sd <- ggplot(df, aes(x = x, y = y, fill = sd_s)) +
    geom_raster() +
    scale_fill_viridis(na.value = "transparent") +
    ggtitle(paste("Genus:", genus)) +
    coord_fixed(ratio = 1) + theme_bw()+
    theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1))

  #Plot the decay of spatial autocorrelation across a user-defined range
  
  spde.est <- inla.spde2.result(inla = model_data$res, name = "spatial.field",
                                spde = model_data$spde, do.transf = TRUE)
  Kappa = inla.zmarginal(spde.est$marginals.kappa[[1]], silent = TRUE)[1]$mean
  MaxRange <- 50000
  Resolution <- 100
  d.vec <- seq(0, MaxRange, length = Resolution)
  Cor.M <- (Kappa * d.vec) * besselK(Kappa * d.vec, 1)
  Cor.M[1] <- 1
  CorData <- data.frame(Distance = d.vec, Correlation = Cor.M)
  p_semi <- ggplot(CorData, aes(x = Distance, y = Correlation)) +
    geom_line(linewidth = 1, alpha = 0.8, color = "blue") +
    coord_fixed(ratio = MaxRange) +
    labs(x = "Distance (m)", y = "Correlation", title = "Matern Correlation Function") +
    ggtitle(paste("Genus:", genus)) +
    theme_minimal()
  
  plots_mean[[genus]] <- p_mean
  plots_sd[[genus]] <- p_sd
  plots_semi[[genus]] <- p_semi

}

combined_plot_tavg <- wrap_plots(plots_tavg, ncol = 3)
combined_plot_tavg

combined_plot_semi <- wrap_plots(plots_semi, ncol = 3)
combined_plot_mean <- wrap_plots(plots_mean, ncol = 3)
combined_plot_sd <- wrap_plots(plots_sd, ncol = 3)
combined_plot_mean
```

#### 3.3.2 Other phenophases in NYC

Since the spatial fiels are more smooth, the coefficient estimates are more valid.

The genus Alnus has fewer data points, leading to non-convergence of the posterior distribution. So it is ignored here.

The magnitude of their responses vary among genera. However, the direction of their response is relatively consistent among most genera, with a 1- to 4-day advancement in SOS, 1-8 days delay in EOS (except Platanus), 1-2 days faster in GreenUp pace (except Celtis), and 1-2 days faster in GreenDown pace (except Carya) as preseason temperature increases 1 degree C.

```{r}
#| label: fig-ny_tavg_comp
#| include: true
#| fig-width: 8
#| fig-cap: "The distribution of the posterior of regression coefficients for `Temp~avg~` for each genus in New York city (Thick line: 90% CI, thin line: 95% CI, point: mean value)."
#| warning: false
#| eval: true

dir_path <- "~/phenology-urban/data/proc/urban/sp_model/inla_year_random/"
city = "NY"
pattern = paste0("^",city,".*\\.rds$")
files <- list.files(dir_path, pattern = pattern, full.names = TRUE)
coef_summary <- data.frame()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub("(.*?)_(.*?)_tavg_(.*?)\\.rds", "\\2", basename(file))
  phe_type <- sub("(.*?)_(.*?)_tavg_(.*?)\\.rds", "\\3", basename(file))
  fixed_summary <- model_data$fix_effect %>%
    mutate(genus = genus, phe_type = phe_type)
  coef_summary <- coef_summary %>%
    rbind(fixed_summary)
}

coef_summary_df <- coef_summary %>%
  mutate(SigAlpha = ifelse(Sig == "*", 1, 0.2),
         phe_type = factor(phe_type, levels = c("SOS", "EOS", "GreenUp", "GreenDown"))) %>%
  filter(Factor != "Alnus")


coef_summary_plot <- ggplot(coef_summary_df, aes(x = factor(Factor, levels = rev(unique(Factor))), 
                       y = Estimate)) +
  geom_point(aes(alpha = SigAlpha), position = position_dodge(w = 0.5), size = 3) +
  geom_errorbar(aes(ymin = Lower, ymax = Upper, alpha = SigAlpha), 
                position = position_dodge(w = 0.5), 
                width = 0.3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  coord_flip() +
  facet_wrap(~phe_type, scales = "free") + 
  labs(x = NULL, y = "Estimate") +
  scale_alpha_identity() +
  theme(legend.position = "right") +
  # geom_text(aes(label = Sig, y = Upper + 0.05), hjust = -0.5, show.legend = FALSE, size = 3) +
  geom_text(aes(label = Estimate, y = Estimate), vjust = -0.9, show.legend = FALSE, size = 3) +
  guides(alpha = "none") +
  theme_minimal()+
  theme(aspect.ratio = 1)
coef_summary_plot
```

#### 3.3.3 Prediction

More appropriate way to prepresent heterogeneity?

-   [ ] The prediction is located at the weather station, because I don't interpolate the weather data to cover the whole city.

```{r}
#| label: fig-ny_predict
#| include: true
#| fig-width: 10
#| fig-cap: "Prediction for the SOS of Acer in 2023 in New York city."
#| warning: false
#| eval: true

NY_Acer_tavg_SOS <- readRDS("~/phenology-urban/data/proc/urban/sp_model/inla_year_random/NY_Acer_tavg_SOS.rds")

city = "NY"
phe_type = "SOS"
genus = "Acer"
mean_doy_acer <- readRDS(paste0("~/phenology-urban/data/proc/urban/",city,"/tavg_allyear_var.rds")) %>%
  filter(genus == !!genus & thres == 0.5 & direction == "up" ) %>%
  summarise(doy = mean(doy)) %>%
  pull(doy)

preseason <- readRDS(paste0("~/phenology-urban/data/proc/urban/",city,"/tavg_allyear_pcorr.rds")) %>%
  filter(genus == !!genus & type == !!phe_type) %>%
  summarise(pre = mean(optimal_pre_length)) %>%
  pull(pre)
start_date = make_date(2023) + days(round(mean_doy_acer) - 1) - days(preseason)
end_date = make_date(2023) + days(round(mean_doy_acer) - 1)

NY_weather <- readRDS(paste0("~/urban-cooling/data/raw/WU/",city,"/",city,"_wu.rds")) %>%
  filter(Date >= start_date & Date <= end_date) %>%
  group_by(name) %>%
  summarise(AvgTemp_mean = mean(AvgTemp),
            Sum_mm_sum = sum(Sum_mm),
            year = as.factor(2023))

NY_srad <- readRDS(paste0("~/phenology-urban/data/raw/",city,"/Daymet/daily2016-2024/srad_wu_2023.rds")) %>%
  filter(time >= start_date & time <= end_date) %>%
  group_by(Site) %>%
  summarise(srad_mean = mean(value)) %>%
  inner_join(NY_weather, by = c("Site" = "name"))

prediction <- read_csv(paste0("~/urban-cooling/data/raw/WU/",city,"/location.csv"), show_col_types = FALSE) %>%
  inner_join(NY_srad, by = "Site") %>%
  na.omit()
index <- inla.stack.index(stack = NY_Acer_tavg_SOS$stk.full, tag = "pred")$data
coorp <- prediction[, c("Lon", "Lat")]
pred_mean <- NY_Acer_tavg_SOS$res$summary.fitted.values[index, "mean"]
pred_ll <- NY_Acer_tavg_SOS$res$summary.fitted.values[index, "0.025quant"]
pred_ul <- NY_Acer_tavg_SOS$res$summary.fitted.values[index, "0.975quant"]

pred_ph_2023 <- rbind(
  data.frame(
    Lon = coorp[, 1], Lat = coorp[, 2],
    value = pred_mean, variable = "pred_mean"
  ),
  data.frame(
    Lon = coorp[, 1], Lat = coorp[, 2],
    value = pred_ll, variable = "pred_ll"
  ),
  data.frame(
    Lon = coorp[, 1], Lat = coorp[, 2],
    value = pred_ul, variable = "pred_ul"
  )
)
pred_ph_2023$variable <- as.factor(pred_ph_2023$variable)

ggplot(pred_ph_2023) +
  geom_point(aes(Lon, Lat, color  = value)) +
  facet_wrap(~variable, nrow = 1) +
  coord_fixed(ratio = 1) +
  scale_color_gradient(
    name = "Predicted SOS\nin 2023",
    low = "blue", high = "orange"
  ) +
  theme_bw()
```

#### 3.3.4 Comparison across cities

For SOS, most genera all cities showed negative association between temperature and the start of season. Only some genera in DV and ST had a positive association.

For EOS, the difference among cities is the most obvious. Almost all genera in NY and ST had a positive association, while most genera in DV had a negative association. **Precipitation/humidity/elevation?**

For GreenUp, most genera had a positive association.

For GreenDown, almost all genera in DV and NY had a negative association, while most genera in ST and HT had a negative association.

```{r}
#| label: fig-city_comp
#| include: true
#| fig-cap: "The distribution of the posterior of regression coefficients for `Temp~avg~` on phenology for each genus (Line: 95% CI, point: mean value)."
#| warning: false
#| fig-width: 10
#| eval: true

### INLA
dir_path <- "~/phenology-urban/data/proc/urban/sp_model/inla_year_random/"
pattern = paste0("^.*\\.rds$")
files <- list.files(dir_path, pattern = pattern, full.names = TRUE)
coef_summary <- data.frame()

for (file in files) {
  model_data <- readRDS(file)
  city <- sub("(.*?)_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  genus <- sub("(.*?)_(.*?)_tavg_(.*?)\\.rds", "\\2", basename(file))
  phe_type <- sub("(.*?)_(.*?)_tavg_(.*?)\\.rds", "\\3", basename(file))
  fixed_summary <- model_data$fix_effect %>%
    mutate(city = city, genus = genus, phe_type = phe_type)
  coef_summary <- coef_summary %>%
    rbind(fixed_summary)
}

coef_summary_df <- coef_summary %>%
  mutate(SigAlpha = ifelse(Sig == "*", 1, 0.2),
         phe_type = factor(phe_type, levels = c("SOS", "EOS", "GreenUp", "GreenDown")),
         city = factor(city, levels = c("NY", "DV", "HT", "ST")))


coef_summary_plot <- ggplot(coef_summary_df, aes(x = factor(Factor, levels = unique(Factor)), y = Estimate, color = city)) +
  geom_point(aes(alpha = SigAlpha), position = position_dodge(w = 0.5), size = 1.2) +
  geom_errorbar(aes(ymin = Lower, ymax = Upper, alpha = SigAlpha), 
                position = position_dodge(w = 0.5), 
                linewidth = 0.5,
                width = 0.3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  # coord_flip() +
  facet_wrap(~phe_type, scales = "free") +
  labs(x = NULL, y = "Estimate") +
  scale_alpha_identity() +
  scale_color_manual(
    values = c("NY" = "darkolivegreen4", "HT" = "navyblue", "DV" = "chocolate", "ST" = "purple")
  ) +
  theme(legend.position = "right") +
  # geom_text(aes(label = Sig, y = Upper + 0.05), hjust = -0.5, show.legend = FALSE, size = 3) +
  # geom_text(aes(label = Estimate, y = Estimate), vjust = -0.9, show.legend = FALSE, size = 3) +
  guides(alpha = "none") +
  theme_minimal()+
  theme(
    axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
coef_summary_plot

```

#### 3.3.5 Simulation for model's validation

Potential issue:

-   [x] The variance among years may be captured by the spatial covariance.

-   [x] The covariance matrix is incorrectly specified.

In this step, I primarily aimed to simulate data to verify whether the model is feasible and whether INLA can effectively capture the model parameters and assess uncertainty. Additionally, I examined whether the method can still detect signals when an incorrect covariance matrix is specified.

I simulated the data with the true slope of `Avg_temp` is **-2**. Both spatial covariance and temporal variance are included, and spatial covariance just happened among the records from the same year. Some records happen in the same location.

**The results demonstrate that this modeling approach is feasible.**

```{r}
#| label: fig-model_simulate
#| include: true
#| eval: false
#| code-fold: false

################ Make up the simulation data ################
set.seed(2025)
lon_range <- c(-74.25156, -73.70623)
lat_range <- c(40.50458, 40.91093)
N <- 200 
lon <- runif(N, min = lon_range[1], max = lon_range[2])
lat <- runif(N, min = lat_range[1], max = lat_range[2])

years <- 2017:2023
nyears <- length(years)
year <- sample(years, N, replace = TRUE)

# fix effects: intercept, tavg, precp, srad
intercept <- 120
tavg <- runif(N, 0, 25)
precp <- runif(N, 0, 500)
srad <- runif(N, 300, 450)

beta <- c(intercept, -2, 0.05, 0.05)
X <- cbind(1, tavg, precp, srad)

# spatial effect
sigma.sq <- 80
phi <- 25
spatial_effect <- numeric(N)

for (y in years) {
  year_idx <- which(year == y)
  if (length(year_idx) > 1) {
    lon_year <- lon[year_idx]
    lat_year <- lat[year_idx]
    dist_matrix_year <- as.matrix(dist(cbind(lon_year, lat_year)))
    cov_matrix_year <- sigma.sq * exp(-phi * dist_matrix_year)
    spatial_effect[year_idx] <- mvrnorm(1, mu = rep(0, length(year_idx)), Sigma = cov_matrix_year)
  } else {
    spatial_effect[year_idx] <- 0
  }
}

# year effect
year_effect <- rnorm(nyears, mean = 0, sd = 1)

mu <- numeric(N)
y <- numeric(N)
tau <- 1 
for (i in 1:N) {
  year_idx <- which(years == year[i])
  mu[i] <- X[i,] %*% beta + spatial_effect[i] + year_effect[year_idx]
  y[i] <- rnorm(1, mean = mu[i], sd = sqrt(1/tau))
}

sim_data <- data.frame(
  lon = lon,
  lat = lat,
  year = year,
  AvgTemp_mean = tavg,
  Sum_mm_sum = precp,
  srad_mean = srad,
  spatial_effect = spatial_effect,
  doy = y
)
```

```{r}
#| label: fig-model_simulate_check
#| include: false
#| fig-height: 3
#| fig-cap: "The distribution of posterior for Temp coeffeicent using simulated data."
#| eval: false

################ Result form Nimble using 4 model ################

dir_path <- "~/phenology-urban/data/proc/urban/sp_model/"
files <- list.files(dir_path, pattern = "^SIM.*Exp\\.rds$", full.names = TRUE)
plots <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub(".*SIM_(.*?)_tavg_SOS_Exp\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == "AvgTemp")
  beta_median <- median(param_data$value)
  beta_mean <- mean(param_data$value)
  p <- param_data %>%
    ggs_density() +
    theme_bw() +
    ggtitle(paste("Model:", genus)) +
    theme(plot.title = element_text(hjust = 0.5)) +
    annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4) +
    annotate("text", x = beta_mean, y = 2, label = paste0("Mean: ", round(beta_mean, 2)),vjust = -1.5, color = "red", size = 4)
  plots[[genus]] <- p
}

combined_plot <- wrap_plots(plots, ncol = 2)
combined_plot
```

```{r}
#| label: fig-model_sen_check
#| include: true
#| eval: true
#| fig-cap: "The distribution of posterior for coeffeicent and spatial field using simulated data and R-INLA."
#| fig-subcap: 
#|   - "Distribution of posterior for coeffeicents"
#|   - "Spatial field"


################ MCMC ################

# dir_path <- "~/phenology-urban/data/proc/urban/sp_model/"
# 
# files <- list.files(dir_path, pattern = "^SIM_sp_random.*\\.rds$", full.names = TRUE)
# plots <- list()
# 
# for (file in files) {
#   model_data <- readRDS(file)
#   genus <- sub(".*SIM_(.*?)_tavg_SOS_(.*?)\\.rds", "\\2", basename(file))
#   
#   beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
#   param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
#     filter(Parameter == "AvgTemp")
#   beta_median <- median(param_data$value)
#   beta_mean <- mean(param_data$value)
#   p <- param_data %>%
#     ggs_density() +
#     theme_bw() +
#     ggtitle(paste("Model:", genus)) +
#     theme(plot.title = element_text(hjust = 0.5)) +
#     annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4) +
#     annotate("text", x = beta_mean, y = 2, label = paste0("Mean: ", round(beta_mean, 2)),vjust = -1.5, color = "red", size = 4)
#   plots[[genus]] <- p
# }
# 
# combined_plot2 <- wrap_plots(plots, ncol = 2)
# combined_plot2
# 
# files <- list.files(dir_path, pattern = "^SIM_joint.*\\.rds$", full.names = TRUE)
# plots <- list()
# 
# for (file in files) {
#   model_data <- readRDS(file)
#   genus <- sub(".*SIM_(.*?)_tavg_SOS_(.*?)\\.rds", "\\2", basename(file))
#   
#   beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
#   param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
#     filter(Parameter == "AvgTemp")
#   beta_median <- median(param_data$value)
#   beta_mean <- mean(param_data$value)
#   p <- param_data %>%
#     ggs_density() +
#     theme_bw() +
#     ggtitle(paste("Model:", genus)) +
#     theme(plot.title = element_text(hjust = 0.5)) +
#     annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4) +
#     annotate("text", x = beta_mean, y = 2, label = paste0("Mean: ", round(beta_mean, 2)),vjust = -1.5, color = "red", size = 4)
#   plots[[genus]] <- p
# }
# 
# combined_plot <- wrap_plots(plots, ncol = 2)
# combined_plot

################ INLA ################

model_data <- readRDS("~/phenology-urban/data/proc/urban/sp_model/SIM_INLA_tavg_SOS.rds")
genus = "Simulation"

# fixed effect

beta_avg_temp <- model_data$res$marginals.fixed
df_list <- lapply(names(beta_avg_temp), function(nm) {
  data.frame(
    x = beta_avg_temp[[nm]][, 1],
    density = beta_avg_temp[[nm]][, 2],
    beta = paste0("beta[", nm, "]") 
  )
})
df <- do.call(rbind, df_list)
fix_effect <- as.data.frame(summary(model_data$res)$fixed) %>%
  rename(Mean = mean, Lower = `0.025quant`,Upper = `0.975quant`) %>%
  mutate(Sig = ifelse(Lower*Upper>0, "*", "")) 
fix_effect <- data.frame(
  Factor = rownames(fix_effect),  # Add Factor column
  fix_effect, 
  row.names = NULL) %>%
  mutate(Factor = case_when(
    Factor == "Intercept" ~ "beta[Intercept]",
    Factor == "AvgTemp_mean" ~ "beta[AvgTemp_mean]",
    Factor == "Sum_mm_sum" ~ "beta[Sum_mm_sum]",
    Factor == "srad_mean" ~ "beta[srad_mean]"
  )) 

df_with_mean <- df %>%
  left_join(fix_effect %>% select(Factor, Mean), by = c("beta" = "Factor"))
annot_data <- df_with_mean %>%
  group_by(beta) %>%
  summarise(
    Mean = first(Mean),
    max_density = max(density)
  )

plot_tavg <- ggplot(df_with_mean, aes(x = x, y = density)) +
  geom_line(linewidth = 1, color = "blue") +
  geom_text(
    aes(x = Mean, y = max_density * 0.95, 
        label = paste0("Mean = ", round(Mean, 3))),
    data = annot_data,
    color = "red", size = 4, hjust = 1.1
  ) +
  facet_wrap(~beta, scales = "free", labeller = label_parsed) + 
  theme_minimal() +
  labs(x = "Coefficient Value", y = "Density") +
  ggtitle(paste("Genus:", genus)) +
  theme(legend.position = "none")

plot_tavg

# spatial field
proj <- inla.mesh.projector(model_data$mesh,dims = c(300, 300))
mean_s <- inla.mesh.project(proj, model_data$res$summary.random$s$mean)
sd_s <- inla.mesh.project(proj, model_data$res$summary.random$s$sd)
df <- expand.grid(x = proj$x, y = proj$y)
df$mean_s <- as.vector(mean_s)
df$sd_s <- as.vector(sd_s)

gmean <- ggplot(df, aes(x = x, y = y, fill = mean_s)) +
  geom_raster() +
  scale_fill_viridis(na.value = "transparent") +
  coord_fixed(ratio = 1) + theme_bw()  +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 0.9))

gsd <- ggplot(df, aes(x = x, y = y, fill = sd_s)) +
  geom_raster() +
  scale_fill_viridis(na.value = "transparent") +
  coord_fixed(ratio = 1) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 0.9))

gmean + gsd
```

#### 3.3.6 Comparison with OLS

I think there is no dramatic difference between the OLS and INLA models. However, I believe this is appropriate, as the spatial part does not significantly impact the coefficient, and primarily accounts for the unexplained residuals in the linear regression.

```{r}
#| label: fig-city_comp_ols
#| include: true
#| fig-cap: "The distribution of the posterior of regression coefficients for `Temp~avg~` on phenology for each genus (Line: 95% CI, point: mean value)."
#| warning: false
#| fig-width: 10
#| eval: true

### INLA
dir_path <- "~/phenology-urban/data/proc/urban/ols_model/"
pattern = paste0("^.*\\.rds$")
files <- list.files(dir_path, pattern = pattern, full.names = TRUE)
coef_summary <- data.frame()

for (file in files) {
  model_data <- readRDS(file)
  city <- sub("(.*?)_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  genus <- sub("(.*?)_(.*?)_tavg_(.*?)\\.rds", "\\2", basename(file))
  phe_type <- sub("(.*?)_(.*?)_tavg_(.*?)\\.rds", "\\3", basename(file))
  fixed_summary <- model_data$fix_effect %>%
    mutate(city = city, genus = genus, phe_type = phe_type)
  coef_summary <- coef_summary %>%
    rbind(fixed_summary)
}

coef_summary_df <- coef_summary %>%
  mutate(SigAlpha = ifelse(Sig == "*", 1, 0.2),
         phe_type = factor(phe_type, levels = c("SOS", "EOS", "GreenUp", "GreenDown")),
         city = factor(city, levels = c("NY", "DV", "HT", "ST")))


coef_summary_plot <- ggplot(coef_summary_df, aes(x = factor(Factor, levels = unique(Factor)), y = Estimate, color = city)) +
  geom_point(aes(alpha = SigAlpha), position = position_dodge(w = 0.5), size = 1.2) +
  geom_errorbar(aes(ymin = Lower, ymax = Upper, alpha = SigAlpha), 
                position = position_dodge(w = 0.5), 
                linewidth = 0.5,
                width = 0.3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  # coord_flip() +
  facet_wrap(~phe_type, scales = "free") +
  labs(x = NULL, y = "Estimate") +
  scale_alpha_identity() +
  scale_color_manual(
    values = c("NY" = "darkolivegreen4", "HT" = "navyblue", "DV" = "chocolate", "ST" = "purple")
  ) +
  theme(legend.position = "right") +
  # geom_text(aes(label = Sig, y = Upper + 0.05), hjust = -0.5, show.legend = FALSE, size = 3) +
  # geom_text(aes(label = Estimate, y = Estimate), vjust = -0.9, show.legend = FALSE, size = 3) +
  guides(alpha = "none") +
  theme_minimal()+
  theme(
    axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
coef_summary_plot
```

## 4 Conclusion and next step

### Conclusion

-   Optimal preseason length for phenology varies among genera.

-   Within the city, trees indeed respond to temperature variations, result in phenology variation

-   Across cities, some pattern noticed.

### Next steps:

-   **What can the urban phenology heterogenity be used for?**

    -   The preview of future warming: compared with the sensitivity in natural environment.

    -   Fine-scale urban phenology: compared with other urban phenology sensitivity detected at coarser scale.

-   Scale up

    -   Cities
    -   Genera

-   Marginal prediction

    -   Prediction results, show their spatial variance
    -   Climate at weather points / interpolated climate

-   Sensitivity

    -   How about use buffer size
    -   Use the Daymet climate infomation directly
