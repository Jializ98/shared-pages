---
title: "workflow_micro_NYC"
author: "Jiali Zhu"
date: "today"
format:
  html:
    code-overflow: wrap
    code-fold: true
    code-tools: true
    code-summary: "Code"
editor: visual
---

```{r}
#| label: load-packages
#| include: false
#| warning: false

library(zhulabtools)
load_packages(c("dplyr","lubridate", "ggplot2", "sf","sp", "readr", "purrr", "stringr","glue", "tidyr", "broom","lme4", "knitr", "broom.mixed", "ppcor", "spdep", "spatialreg", "lmtest","car", "spBayes", "coda", "patchwork", "performance", "terra", "ggpmisc", "gstat", "ggmcmc"))
# source("~/phenology-urban/script/read_clean_WU.R")
select <- dplyr::select
```

## Intro


-   Key highlights (coordinate them with Juwon):

    -   Within-city variation: fine-scale of phenology and climate observations, across large range.
    
    -   Spring & Fall phenology: [Katz et al., 2019](https://www.sciencedirect.com/science/article/pii/S0048969718343675) [Xing et al., 2022](https://link.springer.com/article/10.1007/s00484-022-02322-1). A few papers about intra-urban variation of phenology. Few about the fall phenology.

    -   Phenology pace, different taxa

- Methods

    -   Preseason Optimization: At the year-, site-, and taxa-level. Individual-level pre-period might have some built-in relationship.
    
    -   Spatial regression: Use `nimble` package to address spatial autocorrelation.

## 1 Raw data

### 1.1 Insert tree id base on WU data

For exploratory analysis, I used the street tree in NYC, with the phenology information established by Yiluan. These trees are part of the whole inventory, covering 14 genera and being sampled. I select the trees which are within **500 m** buffer around the weather underground sites (see @fig-tree_wu_sites).

```{r}
#| label: tree_wu_sites
#| include: false
#| warning: false
#| eval: false

################ For phenology data ################

metadata <- read_csv("~/lab-data/datasets/vegetation/PS/urban/metadata.csv") %>%
  filter(site == !!city)

file_list <- list.files(path = "~/lab-data/datasets/vegetation/PS/urban/doy", pattern = paste0("^doy_",city,"_.*\\.rds$"), full.names = TRUE)

data_list <- file_list %>%
  map(~ readRDS(.x))
all_doy <- bind_rows(data_list)

tree_location <- metadata %>%
  mutate(genus = str_extract(taxa, "^[^ ]+")) %>%
  left_join(all_doy, by = "id") %>%
  filter(!is.na(doy))

just_tree_location <- tree_location %>%
  group_by(id) %>%
  slice(1) %>%
  ungroup() %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326)

wu_location <- read_csv(paste0("~/urban-cooling/data/raw/WU/", city, "/location.csv"), show_col_types = FALSE) %>%
  st_as_sf(coords = c("Lon", "Lat"), crs = 4326)
wu_buffer <- st_buffer(wu_location, dist = 500)

intersects <- st_intersects(just_tree_location, wu_buffer)

id_buffer <- just_tree_location %>%
  mutate(buffer_id = sapply(intersects, function(x) if (length(x) == 1) x[1] else NA)) %>% 
  left_join(wu_buffer %>% st_drop_geometry() %>% mutate(buffer_id = row_number()), by = "buffer_id") %>%
  filter(!is.na(buffer_id)) %>%
  dplyr::select(id, Site) %>%
  rbind(
    just_tree_location %>%
    filter(lengths(intersects) > 1) %>%
    rowwise() %>%
    mutate(
      Site = {
        current_row_index <- which(just_tree_location$id == id)
        intersected_buffers <- intersects[[current_row_index]]
        point_geom <- geometry
        buffer_geoms <- wu_location[intersected_buffers, ]$geometry
        distances <- st_distance(point_geom, buffer_geoms)
        nearest_index <- which.min(distances)
        wu_buffer$Site[intersected_buffers[nearest_index]]
      }
    ) %>%
    ungroup() %>%
    dplyr::select(id, Site)
  )

points_in_buffer <- tree_location %>%
  left_join(id_buffer, by = "id") %>%
  filter(!is.na(Site))

# write_csv(points_in_buffer, paste0("~/phenology-urban/data/proc/urban/", city, "/tree_WU_500_buffer_PS.csv"))

```

```{r}
#| label: fig-tree_wu_sites
#| include: true
#| fig-cap: "Location of WU sites and trees"
#| fig-width: 13
#| warning: false

cities = c("NY", "HT", "DV")
plots = list()


for (city in cities){
  points_in_buffer <- read_csv(paste0("~/phenology-urban/data/proc/urban/",city,"/tree_WU_500_buffer_PS.csv"), show_col_types = FALSE)
  points_in_buffer_sf <- points_in_buffer %>%
    st_as_sf(coords = c("lon", "lat"), crs = 4326)
  # us_boundary <- st_read("~/urban-niche/data/raw/CONUS/boundary/us_boundarydissolve.shp") %>%
  #     st_transform(4326)
  
  boundary <- switch(
    city,
    "NY" = st_read("~/urban-cooling/data/raw/WU/NY/Untitled/nybb_dissolved.shp") %>%
      st_transform(4326),
    "DT" = st_read("~/urban-cooling/data/raw/WU/DT/City_of_Detroit_Boundary/City_of_Detroit_Boundary.shp") %>%
      st_transform(4326),
    "ST" = st_read("~/urban-cooling/data/raw/WU/ST/seattle_boundary/CityUGA.shp") %>%
      st_transform(4326) %>%
      filter(CITY_NM == "Seattle"),
    "HT" = st_read("~/urban-cooling/data/raw/WU/HT/kx-houston-texas-city-limits-SHP/houston-texas-city-limits.shp") %>%
      st_transform(4326),
    "TP" = st_read("~/urban-cooling/data/raw/WU/TP/Municipal_Boundary/Municipal_Boundary.shp") %>%
      st_transform(4326) %>%
      filter(NAME == "Tampa"),
    "DV" = st_read("~/urban-cooling/data/raw/WU/DV/denver-boundary/denver-colorado-county-boundary.shp") %>%
      st_transform(4326),
    "AT" = st_read("~/urban-cooling/data/raw/WU/AT/TxDOT_City_Boundaries/Cities.shp") %>%
      filter(CITY_NM == "Austin") %>%
      st_transform(4326),
    stop("Invalid city abbreviation.")
  )
  
  wu_location <- read_csv(paste0("~/urban-cooling/data/raw/WU/", city, "/location.csv"), show_col_types = FALSE) %>%
    st_as_sf(coords = c("Lon", "Lat"), crs = 4326)
  
  p = ggplot() +
    geom_sf(data = boundary, fill = "grey90") +
    # geom_sf(data = us_boundary, color = "blue", size = 1) +
    geom_sf(data = wu_location, color = "blue", size = 0.5) +
    geom_point(data = points_in_buffer, aes(x = lon, y = lat), color = "red",size = 0.01, alpha = 0.01) +
    labs(title = city)
    theme_minimal()
  plots[[city]] = p
}


combined_plot <- wrap_plots(plots, ncol = 3)
combined_plot

city = "NY"
```

### 1.2 Read and clean the WU data (based on GHCNd)

There are 4 raw daily variables selected, i.e. AvgTemp, HighTemp, LowTemp and Precipitation_sum (Sum_mm). I flagged the records which are unknown or questionable according to the methods applied by Global Historical Climatology Network daily [GHCNd](https://www.ncei.noaa.gov/products/land-based-station/global-historical-climatology-network-daily).

```{r}
#| label: read_wu_data
#| include: true
#| warning: false

# all_sites_temp <- read_clean_WU(city = "ST", run_checks = TRUE)
all_sites_temp <- readRDS(paste0("~/urban-cooling/data/raw/WU/",city,"/",city,"_wu.rds")) %>%
  dplyr::select(c(Date, HighTemp, AvgTemp, LowTemp, Sum_mm, name))
```

### 1.3 Shortwave data from Daymet

To control for the influence of other variables on phenology, I also incorporated shortwave radiation data derived from the Daymet daily dataset with a 1 km resolution. Shortwave radiation was extracted for the specific locations of the trees.

```{r}
#| label: plot_function
#| include: true
#| warning: false

# download
srad_daily <- readRDS(paste0("~/phenology-urban/data/raw/",city,"/Daymet/daily2016-2024/srad_daily_2016-2023.rds")) %>%
  select(id, value, date)
```

## 2 Phenological indicators and optimal preseason

The phenological metrics are defined as follows:

![Phenology metrics calculated based on EVI curve from PlanetScope](docs/pheno_matrix.png){#fig-pheno_matrics}


```{r}
#| label: optimal_preseason_fun
#| eval: false
#| include: true
#| warning: false

calculate_partial_correlation <- function(insert_data, direction, thres, genus, pre_lengths, 
                                          phe_variable, temp_variable) {
  subset_tree_pcor <- insert_data %>%
    filter(direction == !!direction & thres == !!thres & genus == !!genus)
  results <- lapply(pre_lengths, function(pre_length) {
    cat("Preseason length (days):", pre_length, "\n")
    preseason_var <- subset_tree_pcor %>%
      mutate(
        start_date = make_date(year) + days(round(mean(doy)) - 1) - days(pre_length),
        end_date = make_date(year) + days(round(mean(doy)) - 1)
      )

    temp_stats <- all_sites_temp %>%
      # filter(name %in% preseason_var$Site) %>%
      inner_join(preseason_var, by = c("name" = "Site")) %>%
      filter(Date >= start_date & Date <= end_date) %>%
      group_by(id,year) %>%
      summarise(
        LowTemp_mean = mean(LowTemp, na.rm = TRUE),
        LowTemp_count = sum(!is.na(LowTemp)),
        AvgTemp_mean = mean(AvgTemp, na.rm = TRUE),
        AvgTemp_count = sum(!is.na(AvgTemp)),
        HighTemp_mean = mean(HighTemp, na.rm = TRUE),
        HighTemp_count = sum(!is.na(HighTemp)),
        Sum_mm_sum = sum(Sum_mm, na.rm = TRUE),
        Sum_mm_count = sum(!is.na(Sum_mm)),
        .groups = "drop"
      )
  
    srad_stats <- srad_daily %>%
      # filter(id %in% preseason_var$id) %>%
      inner_join(preseason_var, by = "id") %>%
      filter(date >= start_date & date <= end_date) %>%
      group_by(id,year) %>%
      summarise(
        srad_mean = mean(value, na.rm = TRUE),
        srad_count = sum(!is.na(value)),
        .groups = "drop"
      )
    
    preseason_var <- preseason_var %>%
      left_join(temp_stats, by = c("id","year")) %>%
      left_join(srad_stats, by = c("id","year"))
    
    
    if (temp_variable %in% c("LowTemp_mean", "HighTemp_mean")){
      selected_data <- preseason_var %>%
      dplyr::select(
        {{ phe_variable }}, LowTemp_mean, HighTemp_mean, Sum_mm_sum,  srad_mean
      ) %>%
      na.omit()
    } else {
      selected_data <- preseason_var %>%
      dplyr::select(
        {{ phe_variable }}, AvgTemp_mean,Sum_mm_sum, srad_mean
      ) %>%
      na.omit()
    }
    partial_corr <- pcor(selected_data)
    
    correlation <- partial_corr$estimate[
        rownames(partial_corr$estimate) == phe_variable, 
        colnames(partial_corr$estimate) == temp_variable
      ]
    pvalue <- partial_corr$p.value[
        rownames(partial_corr$p.value) == phe_variable, 
        colnames(partial_corr$p.value) == temp_variable
      ]
  list(correlation = correlation, pvalue = pvalue, preseason_var = preseason_var)
  })
  
  correlations <- sapply(results, function(x) (x$correlation))
  pvalues <- sapply(results, function(x) (x$pvalue))
  
  
  max_idx <- which.max(abs(correlations))
  
  return(list(
    optimal_pre_length = pre_lengths[max_idx],
    pre_length_candidate  = pre_lengths,
    pre_length_trend = correlations,
    pvalue_trend = pvalues,
    partial_correlation = results[[max_idx]]$correlation,
    partial_corr_pvalue = results[[max_idx]]$pvalue,
    preseason_var = results[[max_idx]]$preseason_var
  ))
}


pre_lengths <- seq(5, 180, by = 5)
all_genus <- unique(points_in_buffer$genus)
temp_variable = "AvgTemp_mean"
```

### 2.1 Spring phenology

#### `SOS` date

Defined as the day of year when individual tree growing season EVI curves first cross the green-up 50% threshold.

```{r}
#| label: optimal_preseason_SOS
#| eval: FALSE
#| include: true
#| warning: false


direction <- "up"
thres <- 0.5
phe_variable = "doy"
insert_data = points_in_buffer

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

spring_date_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
spring_date_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
spring_date_combined_results <- do.call(rbind, lapply(spring_date_combined_results, as.data.frame))

```

#### Green-up Pace

Defined as the time span (in days) required for the individual tree growing season EVI curves to transition from the green-up 20% threshold to the 80% threshold.

```{r}
#| label: optimal_preseason_greenup_pace
#| eval: FALSE
#| include: true

diff <- points_in_buffer %>%
  group_by(year, id, direction) %>%
  filter(thres %in% c(0.2, 0.8)) %>% 
  summarise(
    doy_diff = abs(diff(doy[order(thres)])),
    .groups = "drop"
  )

points_with_diff <- points_in_buffer %>%
  left_join(diff, by = c("year", "id", "direction"))

direction <- "up"
thres <- 0.2              # change to 0.5?
phe_variable = "doy_diff"
insert_data = points_with_diff

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

spring_pace_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
spring_pace_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
spring_pace_combined_results <- do.call(rbind, lapply(spring_pace_combined_results, as.data.frame))

```

### 2.2 Fall phenology

#### `EOS` date

Defined as the day of year when individual tree growing season EVI curves first cross the green-down 50% threshold.

```{r}
#| label: optimal_preseason_EOS
#| layout-ncol: 2
#| eval: FALSE
#| include: true
#| warning: false

direction <- "down"
thres <- 0.5
phe_variable = "doy"
insert_data = points_in_buffer

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
 
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

fall_date_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
fall_date_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
fall_date_combined_results <- do.call(rbind, lapply(fall_date_combined_results, as.data.frame))
```

#### Green-down Pace

Defined as the time span (in days) required for the individual tree growing season EVI curves to transition from the green-down 20% threshold to the 80% threshold.

```{r}
#| label: optimal_preseason_greendown_pace
#| eval: FALSE
#| include: TRUE
direction <- "down"
thres <- 0.2
phe_variable = "doy_diff"
insert_data = points_with_diff

all_results <- list()
all_results <- lapply(all_genus, function(genus) {
  cat("Processing genus:", genus, "\n")
 
  result <- calculate_partial_correlation(
    insert_data = insert_data,
    direction = direction,
    thres = thres,
    genus = genus,
    pre_lengths = pre_lengths,
    phe_variable = phe_variable,
    temp_variable = temp_variable
  )
  return(result)
})

fall_pace_preseason_var <- do.call(rbind, lapply(all_results, function(x) x$preseason_var))
fall_pace_combined_results <- lapply(all_results, function(x) {
  list(
    genus = unique(x$preseason_var$genus),
    optimal_pre_length = x$optimal_pre_length,
    partial_correlation = x$partial_correlation,
    partial_corr_pvalue = x$partial_corr_pvalue,
    pre_length_candidate = x$pre_length_candidate,
    pre_length_trend = x$pre_length_trend,
    pvalue_trend = x$pvalue_trend
  )
})
fall_pace_combined_results <- do.call(rbind, lapply(fall_pace_combined_results, as.data.frame))
```

```{r}
#| label: store_resuts
#| eval: FALSE
#| include: false

# tavg_allyear_var <- spring_date_preseason_var %>%
#   mutate(doy_diff = "NA") %>%
#   rbind(spring_pace_preseason_var, fall_pace_preseason_var) %>%
#   rbind(fall_date_preseason_var %>% mutate(doy_diff = "NA")) %>%
#   saveRDS(paste0("~/phenology-urban/data/proc/urban/", city, "/tavg_allyear_var.rds"))
# 
# tavg_allyear_pcorr <- spring_date_combined_results %>%
#   mutate(type = "SOS") %>%
#   rbind(spring_pace_combined_results %>% mutate(type = "green-up pace")) %>%
#   rbind(fall_pace_combined_results %>% mutate(type = "green-down pace")) %>%
#   rbind(fall_date_combined_results %>% mutate(type = "EOS"))%>%
#   saveRDS(paste0("~/phenology-urban/data/proc/urban/", city, "/tavg_allyear_pcorr.rds"))

# thigh_allyear_var <- spring_date_preseason_var %>%
#   mutate(doy_diff = "NA") %>%
#   rbind(spring_pace_preseason_var, fall_pace_preseason_var) %>%
#   rbind(fall_date_preseason_var %>% mutate(doy_diff = "NA")) %>%
#   saveRDS("~/phenology-urban/data/proc/urban/", city, "/thigh_allyear_var.rds")
# 
# thigh_allyear_pcorr <- spring_date_combined_results %>%
#   mutate(type = "SOS") %>%
#   rbind(spring_pace_combined_results %>% mutate(type = "green-up pace")) %>%
#   rbind(fall_pace_combined_results %>% mutate(type = "green-down pace")) %>%
#   rbind(fall_date_combined_results %>% mutate(type = "EOS"))%>%
#   saveRDS("~/phenology-urban/data/proc/urban/", city, "/thigh_allyear_pcorr.rds")
# 
# tlow_allyear_var <- spring_date_preseason_var %>%
#   mutate(doy_diff = "NA") %>%
#   rbind(spring_pace_preseason_var, fall_pace_preseason_var) %>%
#   rbind(fall_date_preseason_var %>% mutate(doy_diff = "NA")) %>%
#   saveRDS("~/phenology-urban/data/proc/urban/", city, "/tlow_allyear_var.rds")
# 
# tlow_allyear_pcorr <- spring_date_combined_results %>%
#   mutate(type = "SOS") %>%
#   rbind(spring_pace_combined_results %>% mutate(type = "green-up pace")) %>%
#   rbind(fall_pace_combined_results %>% mutate(type = "green-down pace")) %>%
#   rbind(fall_date_combined_results %>% mutate(type = "EOS"))%>%
#   saveRDS("~/phenology-urban/data/proc/urban/", city, "/tlow_allyear_pcorr.rds")
```

### 2.3 Optimal preseason length calculated by Temp~avg~

Defined as the period (5-180 days, with 5-day steps) before phenological event for which the partial correlation coefficient between mean phenological event date and average temperature was highest, controlling other climate variables. [Meng et al., 2020](https://www.pnas.org/doi/10.1073/pnas.1911117117#sec-3), [Yin et al., 2024](https://agupubs.onlinelibrary.wiley.com/doi/full/10.1029/2023EF004127)

![Conceptual diagram for optimal preseason](docs/preseason.png){#fig-preseason_concept}

@fig-partial_preseason displays the distribution of optimal preseason length and partial correlation coefficient calculated by Temp~avg~ for `SOS`, `Greenup pace`, `EOS` and `Greenup pace`, respectively. 

Optimal preseason length for spring phenology varies among genera. As for `SOS`, all genera have negetive partial correlation coefficients, which means the higher preseason average temperature, the earlier start of season. As for `Greenup pace`, most genera (except Carya, Celtis) have negetive partial correlation coefficients, which means the higher preseason average temperature, the faster green up pace. The preseason length varies significantly among genera.

Both the optimal preseason length for fall phenology and the response direction vary significantly among genera. As for `EOS`, most genera (except Populus, Platanus) have positive partial correlation coefficients, which means the higher preseason average temperature, the later end of season. As for `Greenup pace`, there is variation in impact direction among genera. The preseason length also varies significantly among genera.

```{r}
#| label: fig-partial_preseason
#| layout-ncol: 1
#| fig-cap: "Distribution of partial correlation coefficient and preseason length, calculated by Temp~avg~"
#| fig-subcap: 
#|   - "Spring phenology"
#|   - "Fall phenology"
#| warning: false
#| fig-width: 13
#| fig-height: 6


tavg_allyear_pcorr <- readRDS(paste0("~/phenology-urban/data/proc/urban/",city,"/tavg_allyear_pcorr.rds")) %>%
  mutate(
    # Create a flag for optimal_pre_length
    is_optimal = ifelse(pre_length_candidate == optimal_pre_length, TRUE, FALSE),
    # Create a flag for significant pvalue
    is_significant = ifelse(pvalue_trend < 0.05, TRUE, FALSE),
    # Adjust transparency
    alpha = ifelse(is_optimal, 1, 0.2),
    shape = ifelse(is_significant, 21, 1),
    size = ifelse(is_optimal, 4, 1.2)
  ) %>%
  mutate(shape = factor(shape, levels = c(21, 1)),
         size = factor(size, levels = c(1.2, 4)))
  

# Create the plot
sos_p <- ggplot((tavg_allyear_pcorr %>% filter(type == "SOS")), aes(x = pre_length_candidate, y = pre_length_trend, color = genus, fill = genus, group = genus)) +
  geom_line(aes(alpha = 0.1)) +  # Add lines for trends
  geom_point(aes(alpha = alpha, shape = shape, size = size)) +  # Add points with alpha and fill
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  scale_alpha_identity() +  # Use the alpha values directly
  scale_shape_manual(
    name = "Significance", 
    values = c(21, 1),
    labels = c("p <= 0.05", "p > 0.05")   
    ) +
  scale_size_manual(
    name = "Pre-season length",  
    values = c(1.2, 4), 
    labels = c("Others", "Optimal preseason length")
  ) +
  guides(
    shape = guide_legend(override.aes = list(fill = c("black", NA),color = "black")))+
  labs(
    title = "Start of season",
    x = "Pre-season length",
    y = "Partial correlation coefficient"
  ) +
  theme_minimal() +
  theme(legend.position = "right",
        axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14),
        title = element_text(size = 14))
  
greenup_p <- ggplot((tavg_allyear_pcorr %>% filter(type == "green-up pace")), aes(x = pre_length_candidate, y = pre_length_trend, color = genus, fill = genus, group = genus)) +
  geom_line(aes(alpha = 0.1)) +  # Add lines for trends
  geom_point(aes(alpha = alpha, size = size, shape = shape)) +  # Add points with alpha and fill
    geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  scale_alpha_identity() +  # Use the alpha values directly
  scale_shape_manual(
    name = "Significance", 
    values = c(21, 1),
    labels = c("p <= 0.05", "p > 0.05")   
    ) +
  scale_size_manual(
    name = "Pre-season length",  
    values = c(1.2, 4), 
    labels = c("Others", "Optimal preseason length")
  ) +
  guides(
    shape = guide_legend(override.aes = list(fill = c("black", NA),color = "black")))+
  labs(
    title = "Green-up pace",
    x = "Pre-season length",
    y = "Partial correlation coefficient"
  ) +
  theme_minimal() +
  theme(legend.position = "right",
        axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14),
        title = element_text(size = 14))

eos_p <- ggplot((tavg_allyear_pcorr %>% filter(type == "EOS")), aes(x = pre_length_candidate, y = pre_length_trend, color = genus, fill = genus, group = genus)) +
  geom_line(aes(alpha = 0.1)) +  # Add lines for trends
  geom_point(aes(alpha = alpha, size = size, shape = shape)) +  # Add points with alpha and fill
    geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  scale_alpha_identity() +  # Use the alpha values directly
  scale_shape_manual(
    name = "Significance", 
    values = c(21, 1),
    labels = c("p <= 0.05", "p > 0.05")   
    ) +
  scale_size_manual(
    name = "Pre-season length",  
    values = c(1.2, 4), 
    labels = c("Others", "Optimal preseason length")
  ) +
  guides(
    shape = guide_legend(override.aes = list(fill = c("black", NA),color = "black")))+
  labs(
    title = "End of season",
    x = "Pre-season length",
    y = "Partial correlation coefficient"
  ) +
  theme_minimal() +
  theme(legend.position = "right",
        axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14),
        title = element_text(size = 14))


greendown_p <- ggplot((tavg_allyear_pcorr %>% filter(type == "green-down pace")), aes(x = pre_length_candidate, y = pre_length_trend, color = genus, fill = genus, group = genus)) +
  geom_line(aes(alpha = 0.1)) +  # Add lines for trends
  geom_point(aes(alpha = alpha, size = size, shape = shape)) +  # Add points with alpha and fill
    geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  scale_alpha_identity() +  # Use the alpha values directly
  scale_shape_manual(
    name = "Significance", 
    values = c(21, 1),
    labels = c("p <= 0.05", "p > 0.05")   
    ) +
  scale_size_manual(
    name = "Pre-season length",  
    values = c(1.2, 4), 
    labels = c("Others", "Optimal preseason length")
  ) +
  guides(
    shape = guide_legend(override.aes = list(fill = c("black", NA),color = "black")))+
  labs(
    title = "Green-down pace",
    x = "Pre-season length",
    y = "Partial correlation coefficient"
  ) +
  theme_minimal() +
  theme(legend.position = "right",
        axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14),
        title = element_text(size = 14))

sos_p + greenup_p + plot_layout(guides = "collect") & theme(legend.position = "right")
eos_p + greendown_p + plot_layout(guides = "collect") & theme(legend.position = "right")
```

## 3 Spatial pattern

### 3.1 Check spatial autocorrelation

First, I fitted a linear mixed-effects model for each genus with environmental variables (`AvgTemp_mean`, `Sum_mm_sum`, and `srad_mean`) as predictors, with random effects for `year` and `id`, which represent temporal (`(1 | year)`) and spatial (`(1 | id)`) randomness, respectively.

Then I conducted a variance decomposition analysis and compared the proportion of total variance explained by spatial effects and temporal effects respectively. Generally, spatial and temporal variations are both present, but their contributions vary across different genera. Some genera show higher spatial effects, while others have more balanced contributions from spatial and year components.

```{r}
#| label: fig-check_variance
#| include: true
#| warning: false
#| fig-cap: "Variance decomposition analysis for spatial and temporal effects"

tavg_allyear_var <- readRDS("~/phenology-urban/data/proc/urban/DV/tavg_allyear_var.rds")
phe_types <- c("SOS", "EOS", "GreenUp", "GreenDown")
all_genus <- unique(tavg_allyear_var$genus)
results <- list()

for (phe_type in phe_types) {
  if (phe_type == "SOS") {
    phe_metric <- "doy"
    direction <- "up"
    thres <- 0.5
  } else if (phe_type == "EOS") {
    phe_metric <- "doy"
    direction <- "down"
    thres <- 0.5
  } else if (phe_type == "GreenUp") {
    phe_metric <- "doy_diff"
    direction <- "up"
    thres <- 0.2
    tavg_allyear_var$doy_diff <- as.numeric(tavg_allyear_var$doy_diff)
  } else {
    phe_metric <- "doy_diff"
    direction <- "down"
    thres <- 0.2
    tavg_allyear_var$doy_diff <- as.numeric(tavg_allyear_var$doy_diff)
  }
    
    for (genus in all_genus) {
      tavg_SOS <- tavg_allyear_var %>%
        filter(direction == !!direction & thres == thres & genus == !!genus) %>%
        na.omit()
      model <- as.formula(paste0(phe_metric, " ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year) + (1 | id)"))
      full_model <- lmer(model, data = tavg_SOS)
      var_components <- VarCorr(full_model)
      
      total_variance <-  var_components$id[1, 1] +  var_components$year[1, 1] + attr(var_components, "sc")^2
      spatial_contribution <- var_components$id[1, 1]  / total_variance
      year_contribution <-  var_components$year[1, 1] / total_variance
      residual_contribution <- attr(var_components, "sc")^2 / total_variance
      
      variance_components <- data.frame(
            Metric = phe_type,
            Genus = genus,
            Component = c("Spatial", "Year", "Residual"),
            Variance = c(spatial_contribution, year_contribution, residual_contribution)
          )
          
          results[[paste(phe_type, genus, sep = "_")]] <- variance_components
  }
}

final_results <- do.call(rbind, results)
final_results <- final_results %>%
  group_by(Metric, Genus) %>%
  mutate(Variance_Proportion = Variance / sum(Variance),
         Component = factor(Component, levels = c("Spatial", "Residual", "Year")),
         Metric = factor(Metric, levels = c("SOS", "EOS", "GreenUp", "GreenDown")))

ggplot(final_results, aes(x = Genus, y = Variance_Proportion, fill = Component)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~Metric, scales = "free_x") +
  labs(x = "Genus", y = "Variance Proportion", fill = "Component") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set2") 
```

Using `SOS` as an example, I used `check_heteroscedasticity()` to check for heteroscedasticity in the residuals. The results showed almost every model had heterogenerous residuals.

For fixed-effect model (`SOS` \~ `AvgTemp_mean` + `Sum_mm_sum` + `srad_mean`), `Global Moran I` for regression residuals test indicates the presence of spatial autocorrelation in the residuals. `Lagrange Multiplier` test suggests the spatial model should be applied.

I computed the empirical semivariogram for the residuals to analyze spatial structure. The optimal theoretical semivariogram models (among Exp, Sph, Gau, Mat) were chosen to empirical semivariogram using `fit.variogram()`.

```{r}
#| label: check_sp_auto
#| include: true
#| warning: false

tavg_allyear_var <- readRDS("~/phenology-urban/data/proc/urban/NY/tavg_allyear_var.rds")
genera <- unique(tavg_allyear_var$genus)


variogram_sos <- list()
for (i in 1:14) {
  genus = genera[i]
  tavg_SOS <- tavg_allyear_var %>%
    filter(direction == "up" & thres == 0.5 & genus == !!genus) %>%
    na.omit()
  random_OLS <- lmer(doy ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year), data = tavg_SOS)
  # print(check_heteroscedasticity(random_OLS))
  tavg_SOS$residual_random <- tavg_SOS$doy - fitted(random_OLS)

  coordinates(tavg_SOS) <- ~ lon + lat
  vgm.emt <- variogram(residual_random ~ 1, tavg_SOS, cloud = FALSE)
  vgm.las.init <- vgm(model = c("Exp", "Sph", "Gau", "Mat"))
  vgm_exn_fit <- fit.variogram(vgm.emt, vgm.las.init)
  variogram_sos[[i]] <- data.frame(
    genus = genus,
    SOS = vgm_exn_fit$model
  )
}
variogram_sos <- do.call(rbind, variogram_sos)


variogram_eos <- list()
for (i in 1:14) {
  genus = genera[i]
  tavg_SOS <- tavg_allyear_var %>%
    filter(direction == "down" & thres == 0.5 & genus == !!genus) %>%
    na.omit()
  random_OLS <- lmer(doy ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year), data = tavg_SOS)
  # print(check_heteroscedasticity(random_OLS))
  tavg_SOS$residual_random <- tavg_SOS$doy - fitted(random_OLS)

  coordinates(tavg_SOS) <- ~ lon + lat
  vgm.emt <- variogram(residual_random ~ 1, tavg_SOS, cloud = FALSE)
  vgm.las.init <- vgm(model = c("Exp", "Sph", "Gau", "Mat"))
  vgm_exn_fit <- fit.variogram(vgm.emt, vgm.las.init)
  variogram_eos[[i]] <- data.frame(
    genus = genus,
    EOS = vgm_exn_fit$model
  )
}
variogram_eos <- do.call(rbind, variogram_eos)

variogram_up <- list()
for (i in 1:14) {
  genus = genera[i]
  tavg_SOS <- tavg_allyear_var %>%
    filter(direction == "up" & thres == 0.2 & genus == !!genus) %>%
    mutate(doy_diff = as.numeric(doy_diff))%>%
    na.omit()
  random_OLS <- lmer(doy_diff ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year), data = tavg_SOS)
  # print(check_heteroscedasticity(random_OLS))
  tavg_SOS$residual_random <- tavg_SOS$doy - fitted(random_OLS)

  coordinates(tavg_SOS) <- ~ lon + lat
  vgm.emt <- variogram(residual_random ~ 1, tavg_SOS, cloud = FALSE)
  vgm.las.init <- vgm(model = c("Exp", "Sph", "Gau", "Mat"))
  vgm_exn_fit <- fit.variogram(vgm.emt, vgm.las.init)
  variogram_up[[i]] <- data.frame(
    genus = genus,
    GreenUp = vgm_exn_fit$model
  )
}
variogram_up <- do.call(rbind, variogram_up)

variogram_down <- list()
for (i in 1:14) {
  genus = genera[i]
  tavg_SOS <- tavg_allyear_var %>%
    filter(direction == "down" & thres == 0.2 & genus == !!genus) %>%
    mutate(doy_diff = as.numeric(doy_diff))%>%
    na.omit()
  random_OLS <- lmer(doy_diff ~ AvgTemp_mean + Sum_mm_sum + srad_mean + (1|year), data = tavg_SOS)
  # print(check_heteroscedasticity(random_OLS))
  tavg_SOS$residual_random <- tavg_SOS$doy - fitted(random_OLS)

  coordinates(tavg_SOS) <- ~ lon + lat
  vgm.emt <- variogram(residual_random ~ 1, tavg_SOS, cloud = FALSE)
  vgm.las.init <- vgm(model = c("Exp", "Sph", "Gau", "Mat"))
  vgm_exn_fit <- fit.variogram(vgm.emt, vgm.las.init)
  variogram_down[[i]] <- data.frame(
    genus = genus,
    GreenDown = vgm_exn_fit$model
  )
}
variogram_down <- do.call(rbind, variogram_down)

variogram_summary <- variogram_sos %>%
  left_join(variogram_eos, by = "genus") %>%
  left_join(variogram_up, by = "genus") %>%
  left_join(variogram_down, by = "genus")

kable(variogram_summary, caption = "Fitted semivariogram model for each genus")
```

<!-- Sph: 26, Mat: 22, Gau: 4, Exp: 4 HT: Sph, Mat -->

****

### 3.2 Spatial statistical model

I modeled the relationship between the phenology and environmental covariates using a spatial hierarchical model. The response variable (phenology parameter) at location $\mathbf{s}_i$ and in year $\mathbf{t}$, denoted as $y(\mathbf{s}_i, \mathbf{t})$, was modeled as following candidate model:

**Model 1: (current use)**

$$y(\mathbf{s}_i, \mathbf{t}) = \mu(\mathbf{s}_i,\mathbf{t}) + w(\mathbf{s}_i) + u(\mathbf{t}) + \epsilon(\mathbf{s}_i, \mathbf{t})$$

where:

-   *Fixed Effects*: $$\mu(\mathbf{s}_i,\mathbf{t}) = \mathbf{X}_{\mathbf{s}_i,\mathbf{t}} \boldsymbol{\beta}$$

    -   $\mathbf{X}_{\mathbf{s}_i,\mathbf{t}} = [1, \text{AvgTemp}_{\mathbf{s}_i,\mathbf{t}}, \text{Precp}_{\mathbf{s}_i,\mathbf{t}}, \text{srad}_{\mathbf{s}_i,\mathbf{t}}]$ is the design matrix of predictors.
    -   $\boldsymbol{\beta} = [\beta_0, \beta_1, \beta_2, \beta_3]$ are the regression coefficients for the intercept and covariates.

-   *Spatially Correlated Random Effect*: $$w(\mathbf{s}_i) \sim \text{MVN}(\mathbf{0}, \mathbf{R})$$

    -   $\mathbf{R}$ is the spatial correlation matrix defined by a covariance function:

    -   Matérn Covariance Function (if selected): $$\mathbf{R}_{ij} = \sigma^2 \cdot \frac{2^{1-\nu}}{\Gamma(\nu)} \left(\frac{\sqrt{2\nu} D_{ij}}{\rho}\right)^\nu K_\nu\left(\frac{\sqrt{2\nu} D_{ij}}{\rho}\right)$$

    -   Exponential Covariance Function (if selected): $$\mathbf{R}_{ij} = \sigma^2 \cdot \exp(-\phi D_{ij})$$

    -   Gaussian Covariance Function (if selected): $$\mathbf{R}_{ij} = \sigma^2 \cdot \exp(-\phi D_{ij}^2)$$

    -   Spherical Covariance Function (if selected):

    $$\mathbf{R}_{ij} =
            \begin{cases}
            \sigma^2 \cdot \left(1 - \frac{3 D_{ij}}{2\rho} + \frac{D_{ij}^3}{2\rho ^3}\right), & D_{ij} \leq \rho \\
            0, & D_{ij} > \rho
            \end{cases}$$

-   *Year-specific Random Effect*: $$u(\mathbf{t}) \sim \text{N}(0, \tau^2_{\mathbf{t}})$$

    -   $u_{\mathbf{t}}$ captures year-to-year variability, with $\tau^2_{\mathbf{t}}$ being the variance of the year effect.

-   *Independent Nugget Effect*: $$\epsilon(\mathbf{s}_i) \sim \text{N}(0, \tau^2)$$

    -   $\epsilon(\mathbf{s}_i, \mathbf{t})$ accounts for measurement error or small-scale variability.


##### 3.2.1 Nimble model code (run in separate script)

```{r}
#| label: model_build
#| include: true
#| eval: false
#| code-fold: false

spherical_covariance <- nimbleFunction(
  run = function(d = double(0), range = double(0), sigma.sq = double(0)) {
    returnType(double(0)) 
    if (d <= range) {
      return (sigma.sq * (1 - (3 * d / (2 * range)) + (d^3 / (2 * range^3))))
    } else {
      return(0.0)
    }
  }
)

matern_covariance <- nimbleFunction(
  run = function(d = double(0), range = double(0), sigma.sq = double(0), nu = double(0)) {
    returnType(double(0))
      if (d == 0) {
        return(sigma.sq)
      } else {
        part <- (2^(1 - nu)) / gamma(nu)  * (sqrt(2 * nu) * d / range)^nu
        return(sigma.sq * part * besselK(d / range, nu))
      }
  }
)

# Define Nimble model code
model_code <- nimbleCode({
  for (i in 1:N) {
    y[i] ~ dnorm(mu[i], tau)
    mu[i] <- inprod(X[i, 1:P], beta[]) + spatial_effect[i] + year_effect[year[i]]
  }
  for (q in 1:nyears) {
    year_effect[q] ~ dnorm(0, sd = sqrt(tau.year))
  }
  for (j in 1:P) {
    beta[j] ~ dnorm(0, sd = 1000)
  }
  spatial_effect[1:N] ~ dmnorm(Mu[1:N], cov = cov_matrix[1:N, 1:N])
  
  # Choose the covariance function based on variogram fitting
  if (cov_type == "Mat") {
    for (m in 1:N) {
      for (n in 1:N) {
        cov_matrix[m, n] <- matern_covariance(dist_matrix[m, n], range, sigma.sq, nu)
      }
    }
  } else if (cov_type == "Gau") {
    cov_matrix[1:N, 1:N] <- sigma.sq * exp(-phi * dist_matrix[1:N, 1:N]^2)
  } else if (cov_type == "Exp") {
    cov_matrix[1:N, 1:N] <- sigma.sq * exp(-phi * dist_matrix[1:N, 1:N])
  } else if (cov_type == "Sph") {
    for (m in 1:N) {
      for (n in 1:N) {
        cov_matrix[m, n] <- spherical_covariance(dist_matrix[m, n], range, sigma.sq)
      }
    }
  }
  tau ~ dgamma(0.001, 0.001)
  sigma.sq ~ dinvgamma(2.5, 120)
  phi ~ dunif(5 / 1, 5 / 0.1)
  tau.year ~ dinvgamma(2.001, 0.667)
  range ~ dunif(0, 1)
  nu ~ dunif(0.5, 5)
})
```

##### 3.2.2 SOS in NYC

Most genera showed negative association between temperature and the start of season, suggesting the warmer preseason, the earilier start of season. Only Fraxinus had a positive association, with a median coefficient of 0.15. There are significant genus-level differences in how temperature influences the spring phenology.

```{r}
#| label: fig-ny_sos_tavg
#| include: true
#| fig-cap: "The density of the posterior distribution of regression coefficients for `Temp~avg~` with `SOS` as the response variable for each genus in New York city."
#| fig-height: 10
#| fig-width: 10
#| warning: false
#| eval: true


dir_path <- "~/phenology-urban/data/proc/urban/sp_model/year_random/"

files <- list.files(dir_path, pattern = "^NY.*SOS\\.rds$", full.names = TRUE)
plots <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_SOS\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == "AvgTemp")
  beta_median <- median(param_data$value)
  p <- param_data %>%
    ggs_density() +
    theme_bw() +
    ggtitle(paste("Genus:", genus)) +
    theme(plot.title = element_text(hjust = 0.5)) +
    annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4)
  plots[[genus]] <- p
}

combined_plot <- wrap_plots(plots, ncol = 5)
combined_plot
```

```{r}
#| label: fig-ny_sos_tavg_modle2
#| include: true
#| fig-cap: "Model2"
#| fig-height: 10
#| fig-width: 10
#| warning: false
#| eval: false


dir_path <- "~/phenology-urban/data/proc/urban/sp_model/sp_temp/"

files <- list.files(dir_path, pattern = "^NY.*SOS\\.rds$", full.names = TRUE)
plots <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_SOS\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == "AvgTemp")
  beta_median <- median(param_data$value)
  p <- param_data %>%
    ggs_density() +
    theme_bw() +
    ggtitle(paste("Genus:", genus)) +
    theme(plot.title = element_text(hjust = 0.5)) +
    annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4)
  plots[[genus]] <- p
}

combined_plot <- wrap_plots(plots, ncol = 3)
combined_plot
```

##### 3.2.3 EOS in NYC

The response of end of season to temperature shows greater variation among genera compared to spring phenology. For Acer, Betula, Liquidambar, Populus, Quercus, Salix, Ulmus, warmer preseason leads to earlier end of season. In contrast, Catya, Celtis, Fracinus and Juglans exhibited positive associations.

```{r}
#| label: fig-ny_eos_tavg
#| include: true
#| fig-cap: "The density of the posterior distribution of regression coefficients for `Temp~avg~` with `EOS` as the response variable for each genus in New York city."
#| fig-height: 10
#| fig-width: 10
#| warning: false
#| eval: false


dir_path <- "~/phenology-urban/data/proc/urban/sp_model/year_random/"
dir_path <- "~/phenology-urban/data/proc/urban/sp_model/sp_temp/"

files <- list.files(dir_path, pattern = "^NY.*EOS\\.rds$", full.names = TRUE)
plots <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_EOS\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == "AvgTemp")
  beta_median <- median(param_data$value)
  p <- param_data %>%
    ggs_density() +
    theme_bw() +
    ggtitle(paste("Genus:", genus)) +
    theme(plot.title = element_text(hjust = 0.5)) +
    annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4)
  plots[[genus]] <- p
}

combined_plot1 <- wrap_plots(plots, ncol = 3)
combined_plot1
```

##### 3.2.4 GreenUp pace in NYC

The response of green-up pace to temperature shows great variation among genera. For most genera, the warmer the preseason, the faster the green-up pace (shorter green-up length). For Celtis and Ulmus, warmer preseason is associated with slower green-up pace (longer green-up length).

```{r}
#| label: fig-ny_greenup_tavg
#| include: true
#| fig-cap: "The density of the posterior distribution of regression coefficients for `Temp~avg~` with `Green-up pace` as the response variable for each genus in New York city."
#| fig-height: 10
#| fig-width: 10
#| warning: false
#| eval: false


dir_path <- "~/phenology-urban/data/proc/urban/sp_model/sp_temp/"
files <- list.files(dir_path, pattern = "^NY.*Up\\.rds$", full.names = TRUE)
plots <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == "AvgTemp")
  beta_median <- median(param_data$value)
  p <- param_data %>%
    ggs_density() +
    theme_bw() +
    ggtitle(paste("Genus:", genus)) +
    theme(plot.title = element_text(hjust = 0.5)) +
    annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4)
  plots[[genus]] <- p
}

combined_plot <- wrap_plots(plots, ncol = 3)
combined_plot
```

##### 3.2.5 GreenDown pace in NYC

The response of green-down pace to temperature shows great variation among genera. For Acer, Betula, Carya, Celtis, Fraxinus, Morus, Platanus and Quercus, the warmer the preseason, the faster the green-down pace (shorter green-down length). For Juglans, Populus, Salix and Liquidambar, warmer preseason is associated with slower green-down pace (longer green-down length).

```{r}
#| label: fig-ny_greendown_tavg
#| include: true
#| fig-cap: "The density of the posterior distribution of regression coefficients for `Temp~avg~` with `Green-down pace` as the response variable for each genus in New York city."
#| fig-height: 10
#| fig-width: 10
#| warning: false
#| eval: false


dir_path <- "~/phenology-urban/data/proc/urban/sp_model/sp_temp/"
files <- list.files(dir_path, pattern = "^NY.*Down\\.rds$", full.names = TRUE)
plots <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == "AvgTemp")
  beta_median <- median(param_data$value)
  p <- param_data %>%
    ggs_density() +
    theme_bw() +
    ggtitle(paste("Genus:", genus)) +
    theme(plot.title = element_text(hjust = 0.5)) +
    annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4)
  plots[[genus]] <- p
}

combined_plot3 <- wrap_plots(plots, ncol = 3)
combined_plot3
```

##### 3.2.6 Comparison

**Within NY city**

The genus Alnus has fewer data points, leading to non-convergence of the posterior distribution. So it is ignored here. 

Trees indeed respond to temperature variations within the city. The magnitude and direction of their responses vary among genera. The response of SOS is relatively consistent, with a 1- to 4-day advancement as temperature increases 1 degree C.

```{r}
#| label: fig-ny_tavg_comp
#| include: true
#| fig-width: 8
#| fig-cap: "The distribution of the posterior of regression coefficients for `Temp~avg~` for each genus in New York city (Thick line: 90% CI, thin line: 95% CI, point: mean value)."
#| warning: false
#| eval: true


dir_path <- "~/phenology-urban/data/proc/urban/sp_model/year_random/"
SOS_files <- list.files(dir_path, pattern = "^NY.*SOS\\.rds$", full.names = TRUE)
EOS_files <- list.files(dir_path, pattern = "^NY.*EOS\\.rds$", full.names = TRUE)
Gup_files <- list.files(dir_path, pattern = "^NY.*Up\\.rds$", full.names = TRUE)
Gdown_files <- list.files(dir_path, pattern = "^NY.*Down\\.rds$", full.names = TRUE)

param_sos_list <- list()
for (i in seq_along(SOS_files)) {
  file <- SOS_files[i]
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = genus)
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == !!genus)
  param_sos_list[[i]] <- param_data
}

param_eos_list <- list()
for (i in seq_along(EOS_files)) {
  file <- EOS_files[i]
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = genus)
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == !!genus)
  param_eos_list[[i]] <- param_data
}

param_gup_list <- list()
for (i in seq_along(Gup_files)) {
  file <- Gup_files[i]
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = genus)
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == !!genus)
  param_gup_list[[i]] <- param_data
}

param_gdown_list <- list()
for (i in seq_along(Gdown_files)) {
  file <- Gdown_files[i]
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = genus)
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == !!genus)
  param_gdown_list[[i]] <- param_data
}

combined_param_sos_data <- bind_rows(param_sos_list) %>% filter(Parameter != "Alnus")
combined_param_eos_data <- bind_rows(param_eos_list) %>% filter(Parameter != "Alnus")
combined_param_gup_data <- bind_rows(param_gup_list) %>% filter(Parameter != "Alnus")
combined_param_gdown_data <- bind_rows(param_gdown_list) %>% filter(Parameter != "Alnus")
combined_param_data <- combined_param_sos_data %>%
  mutate(phe_type = "SOS") %>%
  bind_rows(combined_param_eos_data %>% mutate(phe_type = "EOS"))%>%
  bind_rows(combined_param_gup_data %>% mutate(phe_type = "GreenUp"))%>%
  bind_rows(combined_param_gdown_data %>% mutate(phe_type = "GreenDown"))

# ggmcmc
list(SOS=combined_param_sos_data, EOS=combined_param_eos_data, GreenUp=combined_param_gup_data, GreenDown = combined_param_gdown_data) %>%
  ggs_caterpillar(thick_ci = c(0.05, 0.95),
                  thin_ci = c(0.025, 0.975),
                  horizontal = FALSE) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  theme_classic() +
  labs(y = "Genus",
       x = "The posterior of regression coefficients for Tavg") +
  theme(
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 10)
  )
```


**Across cities**

For relatively convergent results, species responses are more similar across different cities.
Even for the same genus, the response to temperature varies across different cities.


```{r}
#| label: fig-city_comp_sos
#| include: true
#| fig-cap: "The distribution of the posterior of regression coefficients for `Temp~avg~` on `SOS` for each genus (Line: 95% CI, point: mean value)."
#| warning: false
#| eval: true


dir_path <- "~/phenology-urban/data/proc/urban/sp_model/year_random/"
SOS_files <- list.files(dir_path, pattern = "^NY.*SOS\\.rds$", full.names = TRUE)
EOS_files <- list.files(dir_path, pattern = "^DV.*SOS\\.rds$", full.names = TRUE)
Gup_files <- list.files(dir_path, pattern = "^HT.*SOS\\.rds$", full.names = TRUE)

param_sos_list <- list()
for (i in seq_along(SOS_files)) {
  file <- SOS_files[i]
  model_data <- readRDS(file)
  genus <- sub(".*NY_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = genus)
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == !!genus)
  param_sos_list[[i]] <- param_data
}

param_eos_list <- list()
for (i in seq_along(EOS_files)) {
  file <- EOS_files[i]
  model_data <- readRDS(file)
  genus <- sub(".*DV_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = genus)
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == !!genus)
  param_eos_list[[i]] <- param_data
}

param_gup_list <- list()
for (i in seq_along(Gup_files)) {
  file <- Gup_files[i]
  model_data <- readRDS(file)
  genus <- sub(".*HT_(.*?)_tavg_(.*?)\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = genus)
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == !!genus)
  param_gup_list[[i]] <- param_data
}

combined_param_sos_data <- bind_rows(param_sos_list) %>% filter(Parameter != "Alnus")
combined_param_eos_data <- bind_rows(param_eos_list) %>% filter(Parameter != "Alnus")
combined_param_gup_data <- bind_rows(param_gup_list) %>% filter(Parameter != "Alnus")
combined_param_data <- combined_param_sos_data %>%
  mutate(City = "NY") %>%
  bind_rows(combined_param_eos_data %>% mutate(City = "DV"))%>%
  bind_rows(combined_param_gup_data %>% mutate(City = "HT"))


## geom_linerange
summary_data <- combined_param_data %>%
  group_by(Parameter, City) %>%
  summarise(
    mean_value = mean(value, na.rm = TRUE),
    lower = quantile(value, probs = 0.025),
    upper = quantile(value, probs = 0.975),
    .groups = "drop"
  )
summary_data$City <- factor(summary_data$City, levels = c("NY", "DV", "HT"))

ggplot(summary_data, aes(x = Parameter, y = mean_value, color = City)) +
  geom_point(size = 3, position = position_dodge(width = 0.5)) +  
  geom_linerange(aes(ymin = lower, ymax = upper), size = 0.5, 
                 position = position_dodge(width = 0.5)) + 
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha =0.5) +
  theme_classic() +
  labs(
    title = "The response of SOS to Temp",
    x = "Genus",
    y = "The posterior of regression coefficients for Tavg",
    color = "City"
  ) +
  scale_color_manual(
    values = c("NY" = "darkolivegreen4", "HT" = "navyblue", "DV" = "coral")
    #coral/chocolate
  ) +
  theme(
    axis.title = element_text(size = 12),
    axis.text.x = element_text(size = 10, angle = 45, hjust = 1), 
    axis.text.y = element_text(size = 10)
  )


```


##### 3.2.7 Simulation for model's validation

Potential issue:

  - [x] The variance among years may be captured by the spatial covariance.
  
  - [x] The covariance matrix is incorrectly specified.


In this step, I primarily aimed to simulate data to verify whether the model is feasible and whether MCMC can effectively capture the model parameters and assess uncertainty. Additionally, I examined whether the method can still detect signals when an incorrect covariance matrix is specified.

I simulated the data with the true slope of `Avg_temp` is **-2**. Both spatial covariance (exp covariance) and temporal variance are included, and spatial covariance just happened among the records from the same year. Some records happen in the same location.

**The results demonstrate that this modeling approach is feasible, and it remains robust even when the model specification is incorrect.**

```{r}
#| label: fig-model_simulate
#| include: true
#| eval: false
#| code-fold: false

################ Make up the simulation data ################
set.seed(2025)
lon_range <- c(-74.25156, -73.70623)
lat_range <- c(40.50458, 40.91093)
N <- 200 
lon <- runif(N, min = lon_range[1], max = lon_range[2])
lat <- runif(N, min = lat_range[1], max = lat_range[2])

years <- 2017:2023
nyears <- length(years)
year <- sample(years, N, replace = TRUE)

# fix effects: intercept, tavg, precp, srad
intercept <- 120
tavg <- runif(N, 0, 25)
precp <- runif(N, 0, 500)
srad <- runif(N, 300, 450)

beta <- c(intercept, -2, 0.05, 0.05)
X <- cbind(1, tavg, precp, srad)

# spatial effect
sigma.sq <- 80
phi <- 25
spatial_effect <- numeric(N)

for (y in years) {
  year_idx <- which(year == y)
  if (length(year_idx) > 1) {
    lon_year <- lon[year_idx]
    lat_year <- lat[year_idx]
    dist_matrix_year <- as.matrix(dist(cbind(lon_year, lat_year)))
    cov_matrix_year <- sigma.sq * exp(-phi * dist_matrix_year)
    spatial_effect[year_idx] <- mvrnorm(1, mu = rep(0, length(year_idx)), Sigma = cov_matrix_year)
  } else {
    spatial_effect[year_idx] <- 0
  }
}

# year effect
year_effect <- rnorm(nyears, mean = 0, sd = 1)

mu <- numeric(N)
y <- numeric(N)
tau <- 1 
for (i in 1:N) {
  year_idx <- which(years == year[i])
  mu[i] <- X[i,] %*% beta + spatial_effect[i] + year_effect[year_idx]
  y[i] <- rnorm(1, mean = mu[i], sd = sqrt(1/tau))
}

sim_data <- data.frame(
  lon = lon,
  lat = lat,
  year = year,
  AvgTemp_mean = tavg,
  Sum_mm_sum = precp,
  srad_mean = srad,
  spatial_effect = spatial_effect,
  doy = y
)
```

```{r}
#| label: fig-model_simulate_check
#| include: false
#| fig-height: 3
#| fig-cap: "The distribution of posterior for Temp coeffeicent using simulated data."
#| eval: false

################ Result form Nimble using 4 model ################

dir_path <- "~/phenology-urban/data/proc/urban/sp_model/"
files <- list.files(dir_path, pattern = "^SIM.*Exp\\.rds$", full.names = TRUE)
plots <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub(".*SIM_(.*?)_tavg_SOS_Exp\\.rds", "\\1", basename(file))
  beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == "AvgTemp")
  beta_median <- median(param_data$value)
  beta_mean <- mean(param_data$value)
  p <- param_data %>%
    ggs_density() +
    theme_bw() +
    ggtitle(paste("Model:", genus)) +
    theme(plot.title = element_text(hjust = 0.5)) +
    annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4) +
    annotate("text", x = beta_mean, y = 2, label = paste0("Mean: ", round(beta_mean, 2)),vjust = -1.5, color = "red", size = 4)
  plots[[genus]] <- p
}

combined_plot <- wrap_plots(plots, ncol = 2)
combined_plot
```

```{r}
#| label: fig-model_sen_check
#| include: true
#| eval: true
#| fig-cap: "The distribution of posterior for Temp coeffeicent using simulated data and different covariance model."
#| fig-subcap: 
#|   - "Model 1: Spatial random effect & year random effect"
#|   - "Model 2: Spatio-temporal random effect"


################ Sensitivity to different covariance model ################

dir_path <- "~/phenology-urban/data/proc/urban/sp_model/"

files <- list.files(dir_path, pattern = "^SIM_sp_random.*\\.rds$", full.names = TRUE)
plots <- list()

for (file in files) {
  model_data <- readRDS(file)
  genus <- sub(".*SIM_(.*?)_tavg_SOS_(.*?)\\.rds", "\\2", basename(file))
  
  beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
  param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
    filter(Parameter == "AvgTemp")
  beta_median <- median(param_data$value)
  beta_mean <- mean(param_data$value)
  p <- param_data %>%
    ggs_density() +
    theme_bw() +
    ggtitle(paste("Model:", genus)) +
    theme(plot.title = element_text(hjust = 0.5)) +
    annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4) +
    annotate("text", x = beta_mean, y = 2, label = paste0("Mean: ", round(beta_mean, 2)),vjust = -1.5, color = "red", size = 4)
  plots[[genus]] <- p
}

combined_plot2 <- wrap_plots(plots, ncol = 2)
combined_plot2
# 
# files <- list.files(dir_path, pattern = "^SIM_joint.*\\.rds$", full.names = TRUE)
# plots <- list()
# 
# for (file in files) {
#   model_data <- readRDS(file)
#   genus <- sub(".*SIM_(.*?)_tavg_SOS_(.*?)\\.rds", "\\2", basename(file))
#   
#   beta_label <- data.frame(Parameter = "beta[2]", Label = "AvgTemp")
#   param_data <- ggs(model_data$samples, par_labels = beta_label) %>%
#     filter(Parameter == "AvgTemp")
#   beta_median <- median(param_data$value)
#   beta_mean <- mean(param_data$value)
#   p <- param_data %>%
#     ggs_density() +
#     theme_bw() +
#     ggtitle(paste("Model:", genus)) +
#     theme(plot.title = element_text(hjust = 0.5)) +
#     annotate("text", x = beta_median, y = 0, label = paste0("Median: ", round(beta_median, 2)),vjust = -1.5, color = "red", size = 4) +
#     annotate("text", x = beta_mean, y = 2, label = paste0("Mean: ", round(beta_mean, 2)),vjust = -1.5, color = "red", size = 4)
#   plots[[genus]] <- p
# }
# 
# combined_plot <- wrap_plots(plots, ncol = 2)
# combined_plot
```

**But one more issue**: Since the tree points are clustered around the weather station (especially in NY), the fitted spatial covariance might be localized. 

## 4 Conclusion and next step

### Conclusion

-   Optimal preseason length for phenology varies among genera.

-   Within the city, the relationship between phenology and temperature is still significant. Trees indeed respond to temperature variations, result in phenology variation

    -   The warmer the preseason temperature, the earlier the start of season, considering the spatial autocorrelation of phenology in the model.
    -   As for fall phenology, The magnitude and direction of trees' responses to temperature vary among genera.

-   Across cities, same genus has different response to temperature.


### Next steps:

-   Diagnistic for model
  
    -   Plot the spatial variance term (smoothness/roughness)
    -   Check the variogram, check the range (should be large to capture wider variance), and force it to be large

-   Scale up

    -   Cities
    -   Genera

-   Marginal prediction

    -   Prediction results, show their spatial variance
    -   Climate at weather points / interpolated climate
    
-   Sensitivity

    -   How about use buffer size
    -   Use the Daymet climate infomation directly